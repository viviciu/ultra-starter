"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-client)/./app/components/Loader/index.js":
/*!****************************************!*\
  !*** ./app/components/Loader/index.js ***!
  \****************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-client)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-client)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _react_three_fiber__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @react-three/fiber */ \"(app-client)/./node_modules/@react-three/fiber/dist/index-e6b5343a.esm.js\");\n/* harmony import */ var _react_three_fiber__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @react-three/fiber */ \"(app-client)/./node_modules/@react-three/fiber/dist/react-three-fiber.esm.js\");\n/* harmony import */ var _react_three_drei__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @react-three/drei */ \"(app-client)/./node_modules/@react-three/drei/core/MeshTransmissionMaterial.js\");\n/* harmony import */ var _react_three_drei__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @react-three/drei */ \"(app-client)/./node_modules/@react-three/drei/core/Environment.js\");\n/* harmony import */ var _react_three_drei__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @react-three/drei */ \"(app-client)/./node_modules/@react-three/drei/core/Lightformer.js\");\n/* harmony import */ var _react_three_postprocessing__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @react-three/postprocessing */ \"(app-client)/./node_modules/@react-three/postprocessing/dist/EffectComposer.js\");\n/* harmony import */ var _react_three_postprocessing__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @react-three/postprocessing */ \"(app-client)/./node_modules/@react-three/postprocessing/dist/effects/N8AO/index.js\");\n/* harmony import */ var _data__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./data */ \"(app-client)/./app/components/Loader/data.js\");\n/* harmony import */ var leva__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! leva */ \"(app-client)/./node_modules/leva/dist/leva.esm.js\");\n/* harmony import */ var _Loader_module_scss__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./Loader.module.scss */ \"(app-client)/./app/components/Loader/Loader.module.scss\");\n/* harmony import */ var _Loader_module_scss__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(_Loader_module_scss__WEBPACK_IMPORTED_MODULE_7__);\n/* harmony import */ var _anim_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./anim.js */ \"(app-client)/./app/components/Loader/anim.js\");\n\nvar _s = $RefreshSig$();\n\n\n\n\n\n\n\n\n\n\nconst Loader = (param)=>{\n    let { timeline } = param;\n    _s();\n    var _s1 = $RefreshSig$(), _s2 = $RefreshSig$();\n    const loaderRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const progressRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const progressNumberRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const wordGroupRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        timeline && timeline.add((0,_anim_js__WEBPACK_IMPORTED_MODULE_4__.introAnimation)(wordGroupRef)).add((0,_anim_js__WEBPACK_IMPORTED_MODULE_4__.progressAnimation)(progressRef, progressNumberRef), 0); // 0 is the position of the animation in the timeline. So it starts when the prev. .add begins, but the next .add happens after.\n    // .add(collapseWords(loaderRef), \"-=1\"); // 1 second before the previous animation ends.\n    }, [\n        timeline\n    ]);\n    // R3F Stuff\n    const ref = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)();\n    function Box(props) {\n        _s1();\n        const { camera, raycaster, pointer, viewport } = (0,_react_three_fiber__WEBPACK_IMPORTED_MODULE_5__.A)();\n        const config = (0,leva__WEBPACK_IMPORTED_MODULE_3__.useControls)({\n            meshPhysicalMaterial: false,\n            transmissionSampler: false,\n            backside: true,\n            samples: {\n                value: 16,\n                min: 1,\n                max: 32,\n                step: 1\n            },\n            resolution: {\n                value: 2048,\n                min: 256,\n                max: 2048,\n                step: 256\n            },\n            transmission: {\n                value: 1.0,\n                min: 0,\n                max: 1\n            },\n            roughness: {\n                value: 0.19,\n                min: 0,\n                max: 1,\n                step: 0.01\n            },\n            thickness: {\n                value: 5.95,\n                min: 0,\n                max: 10,\n                step: 0.01\n            },\n            ior: {\n                value: 1.15,\n                min: 1,\n                max: 5,\n                step: 0.01\n            },\n            chromaticAberration: {\n                value: 0.39,\n                min: 0,\n                max: 1\n            },\n            anisotropy: {\n                value: 0.03,\n                min: 0,\n                max: 1,\n                step: 0.01\n            },\n            anisotropicBlur: {\n                value: 0.88,\n                min: 0,\n                max: 1,\n                step: 0.01\n            },\n            distortion: {\n                value: 0.18,\n                min: 0,\n                max: 1,\n                step: 0.01\n            },\n            distortionScale: {\n                value: 0.4,\n                min: 0.01,\n                max: 1,\n                step: 0.01\n            },\n            temporalDistortion: {\n                value: 0.1,\n                min: 0,\n                max: 1,\n                step: 0.01\n            },\n            clearcoat: {\n                value: 0.26,\n                min: 0,\n                max: 1\n            },\n            attenuationDistance: {\n                value: 1.6,\n                min: 0,\n                max: 10,\n                step: 0.01\n            },\n            attenuationColor: \"#ffffff\",\n            color: \"#8f8f8f\",\n            bg: \"#ffffff\"\n        });\n        (0,_react_three_fiber__WEBPACK_IMPORTED_MODULE_5__.C)((state, delta)=>{\n            if (ref.current) {\n                // Project the mesh's 3D position to 2D\n                const projectedPosition = ref.current.position.clone().project(camera);\n                // Calculate the 2D distance between the pointer and the projected position\n                const dx = pointer.x - projectedPosition.x;\n                const dy = pointer.y - projectedPosition.y;\n                const distance = Math.sqrt(dx * dx + dy * dy);\n                ref.current.rotation.x += delta / distance;\n                ref.current.rotation.y += delta / distance;\n            }\n        });\n        const [hovered, hover] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n        return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"mesh\", {\n            ...props,\n            castShadow: true,\n            ref: ref,\n            onPointerOver: (event)=>hover(true),\n            onPointerOut: (event)=>hover(false),\n            children: [\n                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"boxGeometry\", {\n                    args: [\n                        1,\n                        1,\n                        1\n                    ]\n                }, void 0, false, {\n                    fileName: \"/Users/vivianastaicu/Documents/GitHub/ultra-starter/app/components/Loader/index.js\",\n                    lineNumber: 82,\n                    columnNumber: 9\n                }, this),\n                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_react_three_drei__WEBPACK_IMPORTED_MODULE_6__.MeshTransmissionMaterial, {\n                    ...config\n                }, void 0, false, {\n                    fileName: \"/Users/vivianastaicu/Documents/GitHub/ultra-starter/app/components/Loader/index.js\",\n                    lineNumber: 84,\n                    columnNumber: 9\n                }, this)\n            ]\n        }, void 0, true, {\n            fileName: \"/Users/vivianastaicu/Documents/GitHub/ultra-starter/app/components/Loader/index.js\",\n            lineNumber: 75,\n            columnNumber: 7\n        }, this);\n    }\n    _s1(Box, \"sSq/122JZIU2Sjv3zwTK5n0NlFY=\", false, function() {\n        return [\n            _react_three_fiber__WEBPACK_IMPORTED_MODULE_5__.A,\n            leva__WEBPACK_IMPORTED_MODULE_3__.useControls,\n            _react_three_fiber__WEBPACK_IMPORTED_MODULE_5__.C\n        ];\n    });\n    function Shadows(props) {\n        _s2();\n        const { viewport } = (0,_react_three_fiber__WEBPACK_IMPORTED_MODULE_5__.A)();\n        return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"mesh\", {\n            receiveShadow: true,\n            scale: [\n                viewport.width,\n                viewport.height,\n                1\n            ],\n            ...props,\n            children: [\n                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"planeGeometry\", {}, void 0, false, {\n                    fileName: \"/Users/vivianastaicu/Documents/GitHub/ultra-starter/app/components/Loader/index.js\",\n                    lineNumber: 99,\n                    columnNumber: 9\n                }, this),\n                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"shadowMaterial\", {\n                    transparent: true,\n                    opacity: 0.5\n                }, void 0, false, {\n                    fileName: \"/Users/vivianastaicu/Documents/GitHub/ultra-starter/app/components/Loader/index.js\",\n                    lineNumber: 100,\n                    columnNumber: 9\n                }, this)\n            ]\n        }, void 0, true, {\n            fileName: \"/Users/vivianastaicu/Documents/GitHub/ultra-starter/app/components/Loader/index.js\",\n            lineNumber: 94,\n            columnNumber: 7\n        }, this);\n    }\n    _s2(Shadows, \"6JpWNUbsZ0/v1F2PQOyht8yDdjc=\", false, function() {\n        return [\n            _react_three_fiber__WEBPACK_IMPORTED_MODULE_5__.A\n        ];\n    });\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n        className: (_Loader_module_scss__WEBPACK_IMPORTED_MODULE_7___default().loader__wrapper),\n        children: [\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                className: (_Loader_module_scss__WEBPACK_IMPORTED_MODULE_7___default().loader__progressWrapper),\n                children: [\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                        className: (_Loader_module_scss__WEBPACK_IMPORTED_MODULE_7___default().loader__progress),\n                        ref: progressRef\n                    }, void 0, false, {\n                        fileName: \"/Users/vivianastaicu/Documents/GitHub/ultra-starter/app/components/Loader/index.js\",\n                        lineNumber: 108,\n                        columnNumber: 9\n                    }, undefined),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"span\", {\n                        className: (_Loader_module_scss__WEBPACK_IMPORTED_MODULE_7___default().loader__progressNumber),\n                        ref: progressNumberRef,\n                        children: \"0\"\n                    }, void 0, false, {\n                        fileName: \"/Users/vivianastaicu/Documents/GitHub/ultra-starter/app/components/Loader/index.js\",\n                        lineNumber: 109,\n                        columnNumber: 9\n                    }, undefined)\n                ]\n            }, void 0, true, {\n                fileName: \"/Users/vivianastaicu/Documents/GitHub/ultra-starter/app/components/Loader/index.js\",\n                lineNumber: 107,\n                columnNumber: 7\n            }, undefined),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                className: (_Loader_module_scss__WEBPACK_IMPORTED_MODULE_7___default().loader),\n                ref: loaderRef,\n                children: [\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                        className: (_Loader_module_scss__WEBPACK_IMPORTED_MODULE_7___default().loader__words),\n                        children: [\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                className: (_Loader_module_scss__WEBPACK_IMPORTED_MODULE_7___default().loader__overlay)\n                            }, void 0, false, {\n                                fileName: \"/Users/vivianastaicu/Documents/GitHub/ultra-starter/app/components/Loader/index.js\",\n                                lineNumber: 116,\n                                columnNumber: 11\n                            }, undefined),\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                className: (_Loader_module_scss__WEBPACK_IMPORTED_MODULE_7___default().loader__wordsGroup),\n                                ref: wordGroupRef,\n                                children: _data__WEBPACK_IMPORTED_MODULE_2__.words.map((word, index)=>{\n                                    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"span\", {\n                                        className: (_Loader_module_scss__WEBPACK_IMPORTED_MODULE_7___default().loader__word),\n                                        children: word\n                                    }, index, false, {\n                                        fileName: \"/Users/vivianastaicu/Documents/GitHub/ultra-starter/app/components/Loader/index.js\",\n                                        lineNumber: 120,\n                                        columnNumber: 17\n                                    }, undefined);\n                                })\n                            }, void 0, false, {\n                                fileName: \"/Users/vivianastaicu/Documents/GitHub/ultra-starter/app/components/Loader/index.js\",\n                                lineNumber: 117,\n                                columnNumber: 11\n                            }, undefined)\n                        ]\n                    }, void 0, true, {\n                        fileName: \"/Users/vivianastaicu/Documents/GitHub/ultra-starter/app/components/Loader/index.js\",\n                        lineNumber: 115,\n                        columnNumber: 9\n                    }, undefined),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_react_three_fiber__WEBPACK_IMPORTED_MODULE_8__.Canvas, {\n                        onMouseMove: (e)=>{},\n                        shadows: true,\n                        camera: {\n                            position: [\n                                0,\n                                0,\n                                4\n                            ]\n                        },\n                        children: [\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"color\", {\n                                attach: \"background\",\n                                args: [\n                                    \"#010101\"\n                                ]\n                            }, void 0, false, {\n                                fileName: \"/Users/vivianastaicu/Documents/GitHub/ultra-starter/app/components/Loader/index.js\",\n                                lineNumber: 136,\n                                columnNumber: 11\n                            }, undefined),\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(Box, {\n                                position: [\n                                    1.2,\n                                    0,\n                                    0\n                                ]\n                            }, void 0, false, {\n                                fileName: \"/Users/vivianastaicu/Documents/GitHub/ultra-starter/app/components/Loader/index.js\",\n                                lineNumber: 146,\n                                columnNumber: 11\n                            }, undefined),\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_react_three_drei__WEBPACK_IMPORTED_MODULE_9__.Environment, {\n                                resolution: 256,\n                                children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"group\", {\n                                    rotation: [\n                                        -Math.PI / 3,\n                                        0,\n                                        1\n                                    ],\n                                    children: [\n                                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_react_three_drei__WEBPACK_IMPORTED_MODULE_10__.Lightformer, {\n                                            form: \"circle\",\n                                            intensity: 100,\n                                            \"rotation-x\": Math.PI / 2,\n                                            position: [\n                                                0,\n                                                5,\n                                                -9\n                                            ],\n                                            scale: 2\n                                        }, void 0, false, {\n                                            fileName: \"/Users/vivianastaicu/Documents/GitHub/ultra-starter/app/components/Loader/index.js\",\n                                            lineNumber: 150,\n                                            columnNumber: 15\n                                        }, undefined),\n                                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_react_three_drei__WEBPACK_IMPORTED_MODULE_10__.Lightformer, {\n                                            form: \"circle\",\n                                            intensity: 2,\n                                            \"rotation-y\": Math.PI / 2,\n                                            position: [\n                                                -5,\n                                                1,\n                                                -1\n                                            ],\n                                            scale: 2\n                                        }, void 0, false, {\n                                            fileName: \"/Users/vivianastaicu/Documents/GitHub/ultra-starter/app/components/Loader/index.js\",\n                                            lineNumber: 151,\n                                            columnNumber: 15\n                                        }, undefined),\n                                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_react_three_drei__WEBPACK_IMPORTED_MODULE_10__.Lightformer, {\n                                            form: \"circle\",\n                                            intensity: 2,\n                                            \"rotation-y\": Math.PI / 2,\n                                            position: [\n                                                -5,\n                                                -1,\n                                                -1\n                                            ],\n                                            scale: 2\n                                        }, void 0, false, {\n                                            fileName: \"/Users/vivianastaicu/Documents/GitHub/ultra-starter/app/components/Loader/index.js\",\n                                            lineNumber: 152,\n                                            columnNumber: 15\n                                        }, undefined),\n                                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_react_three_drei__WEBPACK_IMPORTED_MODULE_10__.Lightformer, {\n                                            form: \"circle\",\n                                            intensity: 2,\n                                            \"rotation-y\": -Math.PI / 2,\n                                            position: [\n                                                10,\n                                                1,\n                                                0\n                                            ],\n                                            scale: 8\n                                        }, void 0, false, {\n                                            fileName: \"/Users/vivianastaicu/Documents/GitHub/ultra-starter/app/components/Loader/index.js\",\n                                            lineNumber: 153,\n                                            columnNumber: 15\n                                        }, undefined),\n                                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_react_three_drei__WEBPACK_IMPORTED_MODULE_10__.Lightformer, {\n                                            form: \"ring\",\n                                            color: \"#4060ff\",\n                                            intensity: 80,\n                                            onUpdate: (self)=>self.lookAt(0, 0, 0),\n                                            position: [\n                                                10,\n                                                10,\n                                                0\n                                            ],\n                                            scale: 10\n                                        }, void 0, false, {\n                                            fileName: \"/Users/vivianastaicu/Documents/GitHub/ultra-starter/app/components/Loader/index.js\",\n                                            lineNumber: 154,\n                                            columnNumber: 15\n                                        }, undefined)\n                                    ]\n                                }, void 0, true, {\n                                    fileName: \"/Users/vivianastaicu/Documents/GitHub/ultra-starter/app/components/Loader/index.js\",\n                                    lineNumber: 149,\n                                    columnNumber: 13\n                                }, undefined)\n                            }, void 0, false, {\n                                fileName: \"/Users/vivianastaicu/Documents/GitHub/ultra-starter/app/components/Loader/index.js\",\n                                lineNumber: 148,\n                                columnNumber: 11\n                            }, undefined),\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_react_three_postprocessing__WEBPACK_IMPORTED_MODULE_11__.EffectComposer, {\n                                disableNormalPass: true,\n                                children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_react_three_postprocessing__WEBPACK_IMPORTED_MODULE_12__.N8AO, {\n                                    aoRadius: 1,\n                                    intensity: 2\n                                }, void 0, false, {\n                                    fileName: \"/Users/vivianastaicu/Documents/GitHub/ultra-starter/app/components/Loader/index.js\",\n                                    lineNumber: 158,\n                                    columnNumber: 13\n                                }, undefined)\n                            }, void 0, false, {\n                                fileName: \"/Users/vivianastaicu/Documents/GitHub/ultra-starter/app/components/Loader/index.js\",\n                                lineNumber: 157,\n                                columnNumber: 11\n                            }, undefined)\n                        ]\n                    }, void 0, true, {\n                        fileName: \"/Users/vivianastaicu/Documents/GitHub/ultra-starter/app/components/Loader/index.js\",\n                        lineNumber: 127,\n                        columnNumber: 9\n                    }, undefined)\n                ]\n            }, void 0, true, {\n                fileName: \"/Users/vivianastaicu/Documents/GitHub/ultra-starter/app/components/Loader/index.js\",\n                lineNumber: 114,\n                columnNumber: 7\n            }, undefined)\n        ]\n    }, void 0, true, {\n        fileName: \"/Users/vivianastaicu/Documents/GitHub/ultra-starter/app/components/Loader/index.js\",\n        lineNumber: 106,\n        columnNumber: 5\n    }, undefined);\n};\n_s(Loader, \"N+pI5mwacr+pdwIS8+AOsdMs5jM=\");\n_c = Loader;\n/* harmony default export */ __webpack_exports__[\"default\"] = (Loader);\nvar _c;\n$RefreshReg$(_c, \"Loader\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports on update so we can compare the boundary\n                // signatures.\n                module.hot.dispose(function (data) {\n                    data.prevExports = currentExports;\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevExports !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevExports !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1jbGllbnQpLy4vYXBwL2NvbXBvbmVudHMvTG9hZGVyL2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUEyRDtBQUNLO0FBQ21FO0FBQ3BEO0FBQ2hEO0FBQ0g7QUFDTztBQUNKO0FBRVc7QUFDbUM7QUFHN0UsTUFBTTBCLFNBQVM7UUFBQyxFQUFFQyxRQUFRLEVBQUU7OztJQUMxQixNQUFNQyxZQUFZMUIsNkNBQU1BLENBQUM7SUFDekIsTUFBTTJCLGNBQWMzQiw2Q0FBTUEsQ0FBQztJQUMzQixNQUFNNEIsb0JBQW9CNUIsNkNBQU1BLENBQUM7SUFDakMsTUFBTTZCLGVBQWU3Qiw2Q0FBTUEsQ0FBQztJQUU1QkQsZ0RBQVNBLENBQUM7UUFDUjBCLFlBQ0VBLFNBQ0dLLElBQUlSLHdEQUFjQSxDQUFDTyxlQUNuQkMsSUFBSVAsMkRBQWlCQSxDQUFDSSxhQUFhQyxvQkFBb0IsSUFBSSxnSUFBZ0k7SUFDaE0seUZBQXlGO0lBQzNGLEdBQUc7UUFBQ0g7S0FBUztJQUViLFlBQVk7SUFDWixNQUFNTSxNQUFNL0IsNkNBQU1BO0lBQ2xCLFNBQVNnQyxJQUFJQyxLQUFLOztRQUNoQixNQUFNLEVBQUVDLE1BQU0sRUFBRUMsU0FBUyxFQUFFQyxPQUFPLEVBQUVDLFFBQVEsRUFBRSxHQUFHbEMscURBQVFBO1FBQ3pELE1BQU1tQyxTQUFTcEIsaURBQVdBLENBQUM7WUFDekJxQixzQkFBc0I7WUFDdEJDLHFCQUFxQjtZQUNyQkMsVUFBVTtZQUNWQyxTQUFTO2dCQUFFQyxPQUFPO2dCQUFJQyxLQUFLO2dCQUFHQyxLQUFLO2dCQUFJQyxNQUFNO1lBQUU7WUFDL0NDLFlBQVk7Z0JBQUVKLE9BQU87Z0JBQU1DLEtBQUs7Z0JBQUtDLEtBQUs7Z0JBQU1DLE1BQU07WUFBSTtZQUMxREUsY0FBYztnQkFBRUwsT0FBTztnQkFBS0MsS0FBSztnQkFBR0MsS0FBSztZQUFFO1lBQzNDSSxXQUFXO2dCQUFFTixPQUFPO2dCQUFNQyxLQUFLO2dCQUFHQyxLQUFLO2dCQUFHQyxNQUFNO1lBQUs7WUFDckRJLFdBQVc7Z0JBQUVQLE9BQU87Z0JBQU1DLEtBQUs7Z0JBQUdDLEtBQUs7Z0JBQUlDLE1BQU07WUFBSztZQUN0REssS0FBSztnQkFBRVIsT0FBTztnQkFBTUMsS0FBSztnQkFBR0MsS0FBSztnQkFBR0MsTUFBTTtZQUFLO1lBQy9DTSxxQkFBcUI7Z0JBQUVULE9BQU87Z0JBQU1DLEtBQUs7Z0JBQUdDLEtBQUs7WUFBRTtZQUNuRFEsWUFBWTtnQkFBRVYsT0FBTztnQkFBTUMsS0FBSztnQkFBR0MsS0FBSztnQkFBR0MsTUFBTTtZQUFLO1lBQ3REUSxpQkFBaUI7Z0JBQUVYLE9BQU87Z0JBQU1DLEtBQUs7Z0JBQUdDLEtBQUs7Z0JBQUdDLE1BQU07WUFBSztZQUMzRFMsWUFBWTtnQkFBRVosT0FBTztnQkFBTUMsS0FBSztnQkFBR0MsS0FBSztnQkFBR0MsTUFBTTtZQUFLO1lBQ3REVSxpQkFBaUI7Z0JBQUViLE9BQU87Z0JBQUtDLEtBQUs7Z0JBQU1DLEtBQUs7Z0JBQUdDLE1BQU07WUFBSztZQUM3RFcsb0JBQW9CO2dCQUFFZCxPQUFPO2dCQUFLQyxLQUFLO2dCQUFHQyxLQUFLO2dCQUFHQyxNQUFNO1lBQUs7WUFDN0RZLFdBQVc7Z0JBQUVmLE9BQU87Z0JBQU1DLEtBQUs7Z0JBQUdDLEtBQUs7WUFBRTtZQUN6Q2MscUJBQXFCO2dCQUFFaEIsT0FBTztnQkFBS0MsS0FBSztnQkFBR0MsS0FBSztnQkFBSUMsTUFBTTtZQUFLO1lBQy9EYyxrQkFBa0I7WUFDbEJDLE9BQU87WUFDUEMsSUFBSTtRQUNOO1FBSUExRCxxREFBUUEsQ0FBQyxDQUFDMkQsT0FBT0M7WUFDZixJQUFJakMsSUFBSWtDLFNBQVM7Z0JBQ2YsdUNBQXVDO2dCQUN2QyxNQUFNQyxvQkFBb0JuQyxJQUFJa0MsUUFBUUUsU0FBU0MsUUFBUUMsUUFBUW5DO2dCQUUvRCwyRUFBMkU7Z0JBQzNFLE1BQU1vQyxLQUFLbEMsUUFBUW1DLElBQUlMLGtCQUFrQks7Z0JBQ3pDLE1BQU1DLEtBQUtwQyxRQUFRcUMsSUFBSVAsa0JBQWtCTztnQkFDekMsTUFBTUMsV0FBV0MsS0FBS0MsS0FBS04sS0FBS0EsS0FBS0UsS0FBS0E7Z0JBRzFDekMsSUFBSWtDLFFBQVFZLFNBQVNOLEtBQUtQLFFBQVFVO2dCQUNsQzNDLElBQUlrQyxRQUFRWSxTQUFTSixLQUFLVCxRQUFRVTtZQUNwQztRQUNGO1FBRUEsTUFBTSxDQUFDSSxTQUFTQyxNQUFNLEdBQUc5RSwrQ0FBUUEsQ0FBQztRQUNsQyxxQkFDRSw4REFBQytFO1lBQ0UsR0FBRy9DLEtBQUs7WUFDVGdELFVBQVU7WUFDVmxELEtBQUtBO1lBQ0xtRCxlQUFlLENBQUNDLFFBQVVKLE1BQU07WUFDaENLLGNBQWMsQ0FBQ0QsUUFBVUosTUFBTTs7OEJBRS9CLDhEQUFDTTtvQkFBWUMsTUFBTTt3QkFBQzt3QkFBRzt3QkFBRztxQkFBRTs7Ozs7OzhCQUU1Qiw4REFBQzFFLHVFQUF3QkE7b0JBQ3RCLEdBQUcwQixNQUFNOzs7Ozs7Ozs7Ozs7SUFJbEI7UUEzRFNOOztZQUMwQzdCLGlEQUFRQTtZQUMxQ2UsNkNBQVdBO1lBeUIxQmQsaURBQVFBOzs7SUFrQ1YsU0FBU21GLFFBQVF0RCxLQUFLOztRQUNwQixNQUFNLEVBQUVJLFFBQVEsRUFBRSxHQUFHbEMscURBQVFBO1FBQzdCLHFCQUNFLDhEQUFDNkU7WUFDQ1EsYUFBYTtZQUNiQyxPQUFPO2dCQUFDcEQsU0FBU3FEO2dCQUFPckQsU0FBU3NEO2dCQUFRO2FBQUU7WUFDMUMsR0FBRzFELEtBQUs7OzhCQUVULDhEQUFDMkQ7Ozs7OzhCQUNELDhEQUFDQztvQkFBZUMsV0FBVztvQkFBQ0MsU0FBUzs7Ozs7Ozs7Ozs7O0lBRzNDO1FBWlNSOztZQUNjcEYsaURBQVFBOzs7SUFhL0IscUJBQ0UsOERBQUM2RjtRQUFJQyxXQUFXN0UsNEVBQXNCOEU7OzBCQUNwQyw4REFBQ0Y7Z0JBQUlDLFdBQVc3RSxvRkFBOEIrRTs7a0NBQzVDLDhEQUFDSDt3QkFBSUMsV0FBVzdFLDZFQUF1QmdGO3dCQUFFckUsS0FBS0o7Ozs7OztrQ0FDOUMsOERBQUMwRTt3QkFBS0osV0FBVzdFLG1GQUE2QmtGO3dCQUFFdkUsS0FBS0g7a0NBQW1COzs7Ozs7Ozs7Ozs7MEJBSzFFLDhEQUFDb0U7Z0JBQUlDLFdBQVc3RSxtRUFBYW1GO2dCQUFFeEUsS0FBS0w7O2tDQUNsQyw4REFBQ3NFO3dCQUFJQyxXQUFXN0UsMEVBQW9Cb0Y7OzBDQUNsQyw4REFBQ1I7Z0NBQUlDLFdBQVc3RSw0RUFBc0JxRjs7Ozs7OzBDQUN0Qyw4REFBQ1Q7Z0NBQUlDLFdBQVc3RSwrRUFBeUJzRjtnQ0FBRTNFLEtBQUtGOzBDQUM3Q2Isd0NBQUtBLENBQUMyRixJQUFJLENBQUNDLE1BQU1DO29DQUNoQixxQkFDRSw4REFBQ1I7d0NBQWlCSixXQUFXN0UseUVBQW1CMEY7a0RBQzdDRjt1Q0FEUUM7Ozs7O2dDQUlmOzs7Ozs7Ozs7Ozs7a0NBR0osOERBQUMzRyxzREFBTUE7d0JBQ0w2RyxhQUFhLENBQUNDLEtBQU87d0JBQ3JCQyxPQUFPO3dCQUNQL0UsUUFBUTs0QkFBRWlDLFVBQVU7Z0NBQUM7Z0NBQUc7Z0NBQUc7NkJBQUU7d0JBQUM7OzBDQU05Qiw4REFBQ047Z0NBQU1xRCxRQUFPO2dDQUFhNUIsTUFBTTtvQ0FBQztpQ0FBVTs7Ozs7OzBDQVU1Qyw4REFBQ3REO2dDQUFJbUMsVUFBVTtvQ0FBQztvQ0FBSztvQ0FBRztpQ0FBRTs7Ozs7OzBDQUUxQiw4REFBQ3hELDBEQUFXQTtnQ0FBQ29DLFlBQVk7MENBQ3ZCLDRFQUFDb0U7b0NBQU10QyxVQUFVO3dDQUFDLENBQUNGLEtBQUt5QyxLQUFLO3dDQUFHO3dDQUFHO3FDQUFFOztzREFDbkMsOERBQUM3RywyREFBV0E7NENBQUM4RyxNQUFLOzRDQUFTQyxXQUFXOzRDQUFLQyxjQUFZNUMsS0FBS3lDLEtBQUs7NENBQUdqRCxVQUFVO2dEQUFDO2dEQUFHO2dEQUFHLENBQUM7NkNBQUU7NENBQUVzQixPQUFPOzs7Ozs7c0RBQ2pHLDhEQUFDbEYsMkRBQVdBOzRDQUFDOEcsTUFBSzs0Q0FBU0MsV0FBVzs0Q0FBR0UsY0FBWTdDLEtBQUt5QyxLQUFLOzRDQUFHakQsVUFBVTtnREFBQyxDQUFDO2dEQUFHO2dEQUFHLENBQUM7NkNBQUU7NENBQUVzQixPQUFPOzs7Ozs7c0RBQ2hHLDhEQUFDbEYsMkRBQVdBOzRDQUFDOEcsTUFBSzs0Q0FBU0MsV0FBVzs0Q0FBR0UsY0FBWTdDLEtBQUt5QyxLQUFLOzRDQUFHakQsVUFBVTtnREFBQyxDQUFDO2dEQUFHLENBQUM7Z0RBQUcsQ0FBQzs2Q0FBRTs0Q0FBRXNCLE9BQU87Ozs7OztzREFDakcsOERBQUNsRiwyREFBV0E7NENBQUM4RyxNQUFLOzRDQUFTQyxXQUFXOzRDQUFHRSxjQUFZLENBQUM3QyxLQUFLeUMsS0FBSzs0Q0FBR2pELFVBQVU7Z0RBQUM7Z0RBQUk7Z0RBQUc7NkNBQUU7NENBQUVzQixPQUFPOzs7Ozs7c0RBQ2hHLDhEQUFDbEYsMkRBQVdBOzRDQUFDOEcsTUFBSzs0Q0FBT3hELE9BQU07NENBQVV5RCxXQUFXOzRDQUFJRyxVQUFVLENBQUNDLE9BQVNBLEtBQUtDLE9BQU8sR0FBRyxHQUFHOzRDQUFJeEQsVUFBVTtnREFBQztnREFBSTtnREFBSTs2Q0FBRTs0Q0FBRXNCLE9BQU87Ozs7Ozs7Ozs7Ozs7Ozs7OzBDQUdwSSw4REFBQzVFLHdFQUFjQTtnQ0FBQytHLGlCQUFpQjswQ0FDL0IsNEVBQUM5Ryw4REFBSUE7b0NBQUMrRyxVQUFVO29DQUFHUCxXQUFXOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQU8xQztHQXZKTTlGO0tBQUFBO0FBeUpOLCtEQUFlQSxNQUFNQSxFQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL2FwcC9jb21wb25lbnRzL0xvYWRlci9pbmRleC5qcz8xZmE5Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCwgeyB1c2VFZmZlY3QsIHVzZVJlZiwgdXNlU3RhdGUgfSBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCB7IENhbnZhcywgdXNlVGhyZWUsIHVzZUZyYW1lIH0gZnJvbSBcIkByZWFjdC10aHJlZS9maWJlclwiO1xuaW1wb3J0IHsgdXNlR0xURiwgRmxvYXQsIExpZ2h0Zm9ybWVyLCBUZXh0LCBIdG1sLCBDb250YWN0U2hhZG93cywgRW52aXJvbm1lbnQsIE1lc2hUcmFuc21pc3Npb25NYXRlcmlhbCB9IGZyb20gXCJAcmVhY3QtdGhyZWUvZHJlaVwiO1xuaW1wb3J0IHsgRWZmZWN0Q29tcG9zZXIsIE44QU8sIFRpbHRTaGlmdDIgfSBmcm9tIFwiQHJlYWN0LXRocmVlL3Bvc3Rwcm9jZXNzaW5nXCI7XG5pbXBvcnQgeyB3b3JkcyB9IGZyb20gXCIuL2RhdGFcIjtcbmltcG9ydCB7IGdzYXAgfSBmcm9tIFwiZ3NhcFwiO1xuaW1wb3J0IHsgdXNlQ29udHJvbHMgfSBmcm9tIFwibGV2YVwiO1xuaW1wb3J0ICogYXMgVEhSRUUgZnJvbSBcInRocmVlXCI7XG5cbmltcG9ydCBzdHlsZXMgZnJvbSBcIi4vTG9hZGVyLm1vZHVsZS5zY3NzXCI7XG5pbXBvcnQgeyBjb2xsYXBzZVdvcmRzLCBpbnRyb0FuaW1hdGlvbiwgcHJvZ3Jlc3NBbmltYXRpb24gfSBmcm9tIFwiLi9hbmltLmpzXCI7XG5cblxuY29uc3QgTG9hZGVyID0gKHsgdGltZWxpbmUgfSkgPT4ge1xuICBjb25zdCBsb2FkZXJSZWYgPSB1c2VSZWYobnVsbCk7XG4gIGNvbnN0IHByb2dyZXNzUmVmID0gdXNlUmVmKG51bGwpO1xuICBjb25zdCBwcm9ncmVzc051bWJlclJlZiA9IHVzZVJlZihudWxsKTtcbiAgY29uc3Qgd29yZEdyb3VwUmVmID0gdXNlUmVmKG51bGwpO1xuXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgdGltZWxpbmUgJiZcbiAgICAgIHRpbWVsaW5lXG4gICAgICAgIC5hZGQoaW50cm9BbmltYXRpb24od29yZEdyb3VwUmVmKSlcbiAgICAgICAgLmFkZChwcm9ncmVzc0FuaW1hdGlvbihwcm9ncmVzc1JlZiwgcHJvZ3Jlc3NOdW1iZXJSZWYpLCAwKTsgLy8gMCBpcyB0aGUgcG9zaXRpb24gb2YgdGhlIGFuaW1hdGlvbiBpbiB0aGUgdGltZWxpbmUuIFNvIGl0IHN0YXJ0cyB3aGVuIHRoZSBwcmV2LiAuYWRkIGJlZ2lucywgYnV0IHRoZSBuZXh0IC5hZGQgaGFwcGVucyBhZnRlci5cbiAgICAvLyAuYWRkKGNvbGxhcHNlV29yZHMobG9hZGVyUmVmKSwgXCItPTFcIik7IC8vIDEgc2Vjb25kIGJlZm9yZSB0aGUgcHJldmlvdXMgYW5pbWF0aW9uIGVuZHMuXG4gIH0sIFt0aW1lbGluZV0pO1xuXG4gIC8vIFIzRiBTdHVmZlxuICBjb25zdCByZWYgPSB1c2VSZWYoKTtcbiAgZnVuY3Rpb24gQm94KHByb3BzKSB7XG4gICAgY29uc3QgeyBjYW1lcmEsIHJheWNhc3RlciwgcG9pbnRlciwgdmlld3BvcnQgfSA9IHVzZVRocmVlKCk7XG4gICAgY29uc3QgY29uZmlnID0gdXNlQ29udHJvbHMoe1xuICAgICAgbWVzaFBoeXNpY2FsTWF0ZXJpYWw6IGZhbHNlLFxuICAgICAgdHJhbnNtaXNzaW9uU2FtcGxlcjogZmFsc2UsXG4gICAgICBiYWNrc2lkZTogdHJ1ZSxcbiAgICAgIHNhbXBsZXM6IHsgdmFsdWU6IDE2LCBtaW46IDEsIG1heDogMzIsIHN0ZXA6IDEgfSxcbiAgICAgIHJlc29sdXRpb246IHsgdmFsdWU6IDIwNDgsIG1pbjogMjU2LCBtYXg6IDIwNDgsIHN0ZXA6IDI1NiB9LFxuICAgICAgdHJhbnNtaXNzaW9uOiB7IHZhbHVlOiAxLjAsIG1pbjogMCwgbWF4OiAxIH0sXG4gICAgICByb3VnaG5lc3M6IHsgdmFsdWU6IDAuMTksIG1pbjogMCwgbWF4OiAxLCBzdGVwOiAwLjAxIH0sXG4gICAgICB0aGlja25lc3M6IHsgdmFsdWU6IDUuOTUsIG1pbjogMCwgbWF4OiAxMCwgc3RlcDogMC4wMSB9LFxuICAgICAgaW9yOiB7IHZhbHVlOiAxLjE1LCBtaW46IDEsIG1heDogNSwgc3RlcDogMC4wMSB9LFxuICAgICAgY2hyb21hdGljQWJlcnJhdGlvbjogeyB2YWx1ZTogMC4zOSwgbWluOiAwLCBtYXg6IDEgfSxcbiAgICAgIGFuaXNvdHJvcHk6IHsgdmFsdWU6IDAuMDMsIG1pbjogMCwgbWF4OiAxLCBzdGVwOiAwLjAxIH0sXG4gICAgICBhbmlzb3Ryb3BpY0JsdXI6IHsgdmFsdWU6IDAuODgsIG1pbjogMCwgbWF4OiAxLCBzdGVwOiAwLjAxIH0sXG4gICAgICBkaXN0b3J0aW9uOiB7IHZhbHVlOiAwLjE4LCBtaW46IDAsIG1heDogMSwgc3RlcDogMC4wMSB9LFxuICAgICAgZGlzdG9ydGlvblNjYWxlOiB7IHZhbHVlOiAwLjQsIG1pbjogMC4wMSwgbWF4OiAxLCBzdGVwOiAwLjAxIH0sXG4gICAgICB0ZW1wb3JhbERpc3RvcnRpb246IHsgdmFsdWU6IDAuMSwgbWluOiAwLCBtYXg6IDEsIHN0ZXA6IDAuMDEgfSxcbiAgICAgIGNsZWFyY29hdDogeyB2YWx1ZTogMC4yNiwgbWluOiAwLCBtYXg6IDEgfSxcbiAgICAgIGF0dGVudWF0aW9uRGlzdGFuY2U6IHsgdmFsdWU6IDEuNiwgbWluOiAwLCBtYXg6IDEwLCBzdGVwOiAwLjAxIH0sXG4gICAgICBhdHRlbnVhdGlvbkNvbG9yOiBcIiNmZmZmZmZcIixcbiAgICAgIGNvbG9yOiBcIiM4ZjhmOGZcIixcbiAgICAgIGJnOiBcIiNmZmZmZmZcIiwgXG4gICAgfSk7XG5cblxuXG4gICAgdXNlRnJhbWUoKHN0YXRlLCBkZWx0YSkgPT4ge1xuICAgICAgaWYgKHJlZi5jdXJyZW50KSB7XG4gICAgICAgIC8vIFByb2plY3QgdGhlIG1lc2gncyAzRCBwb3NpdGlvbiB0byAyRFxuICAgICAgICBjb25zdCBwcm9qZWN0ZWRQb3NpdGlvbiA9IHJlZi5jdXJyZW50LnBvc2l0aW9uLmNsb25lKCkucHJvamVjdChjYW1lcmEpO1xuXG4gICAgICAgIC8vIENhbGN1bGF0ZSB0aGUgMkQgZGlzdGFuY2UgYmV0d2VlbiB0aGUgcG9pbnRlciBhbmQgdGhlIHByb2plY3RlZCBwb3NpdGlvblxuICAgICAgICBjb25zdCBkeCA9IHBvaW50ZXIueCAtIHByb2plY3RlZFBvc2l0aW9uLng7XG4gICAgICAgIGNvbnN0IGR5ID0gcG9pbnRlci55IC0gcHJvamVjdGVkUG9zaXRpb24ueTtcbiAgICAgICAgY29uc3QgZGlzdGFuY2UgPSBNYXRoLnNxcnQoZHggKiBkeCArIGR5ICogZHkpO1xuXG5cbiAgICAgICAgcmVmLmN1cnJlbnQucm90YXRpb24ueCArPSBkZWx0YSAvIGRpc3RhbmNlO1xuICAgICAgICByZWYuY3VycmVudC5yb3RhdGlvbi55ICs9IGRlbHRhIC8gZGlzdGFuY2U7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBjb25zdCBbaG92ZXJlZCwgaG92ZXJdID0gdXNlU3RhdGUoZmFsc2UpO1xuICAgIHJldHVybiAoXG4gICAgICA8bWVzaFxuICAgICAgICB7Li4ucHJvcHN9XG4gICAgICAgIGNhc3RTaGFkb3dcbiAgICAgICAgcmVmPXtyZWZ9XG4gICAgICAgIG9uUG9pbnRlck92ZXI9eyhldmVudCkgPT4gaG92ZXIodHJ1ZSl9XG4gICAgICAgIG9uUG9pbnRlck91dD17KGV2ZW50KSA9PiBob3ZlcihmYWxzZSl9XG4gICAgICA+XG4gICAgICAgIDxib3hHZW9tZXRyeSBhcmdzPXtbMSwgMSwgMV19IC8+XG4gICAgICAgIHsvKiA8bWVzaFBoeXNpY2FsTWF0ZXJpYWwgY29sb3I9e2hvdmVyZWQgPyAnaG90cGluaycgOiAnb3JhbmdlJ30gLz4gKi99XG4gICAgICAgIDxNZXNoVHJhbnNtaXNzaW9uTWF0ZXJpYWxcbiAgICAgICAgICB7Li4uY29uZmlnfVxuICAgICAgICAvPlxuICAgICAgPC9tZXNoPlxuICAgICk7XG4gIH1cblxuICBmdW5jdGlvbiBTaGFkb3dzKHByb3BzKSB7XG4gICAgY29uc3QgeyB2aWV3cG9ydCB9ID0gdXNlVGhyZWUoKTtcbiAgICByZXR1cm4gKFxuICAgICAgPG1lc2hcbiAgICAgICAgcmVjZWl2ZVNoYWRvd1xuICAgICAgICBzY2FsZT17W3ZpZXdwb3J0LndpZHRoLCB2aWV3cG9ydC5oZWlnaHQsIDFdfVxuICAgICAgICB7Li4ucHJvcHN9XG4gICAgICA+XG4gICAgICAgIDxwbGFuZUdlb21ldHJ5IC8+XG4gICAgICAgIDxzaGFkb3dNYXRlcmlhbCB0cmFuc3BhcmVudCBvcGFjaXR5PXswLjV9IC8+XG4gICAgICA8L21lc2g+XG4gICAgKTtcbiAgfVxuXG4gIHJldHVybiAoXG4gICAgPGRpdiBjbGFzc05hbWU9e3N0eWxlcy5sb2FkZXJfX3dyYXBwZXJ9PlxuICAgICAgPGRpdiBjbGFzc05hbWU9e3N0eWxlcy5sb2FkZXJfX3Byb2dyZXNzV3JhcHBlcn0+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPXtzdHlsZXMubG9hZGVyX19wcm9ncmVzc30gcmVmPXtwcm9ncmVzc1JlZn0+PC9kaXY+XG4gICAgICAgIDxzcGFuIGNsYXNzTmFtZT17c3R5bGVzLmxvYWRlcl9fcHJvZ3Jlc3NOdW1iZXJ9IHJlZj17cHJvZ3Jlc3NOdW1iZXJSZWZ9PlxuICAgICAgICAgIDBcbiAgICAgICAgPC9zcGFuPlxuICAgICAgPC9kaXY+XG5cbiAgICAgIDxkaXYgY2xhc3NOYW1lPXtzdHlsZXMubG9hZGVyfSByZWY9e2xvYWRlclJlZn0+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPXtzdHlsZXMubG9hZGVyX193b3Jkc30+XG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9e3N0eWxlcy5sb2FkZXJfX292ZXJsYXl9PjwvZGl2PlxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPXtzdHlsZXMubG9hZGVyX193b3Jkc0dyb3VwfSByZWY9e3dvcmRHcm91cFJlZn0+XG4gICAgICAgICAgICB7d29yZHMubWFwKCh3b3JkLCBpbmRleCkgPT4ge1xuICAgICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgIDxzcGFuIGtleT17aW5kZXh9IGNsYXNzTmFtZT17c3R5bGVzLmxvYWRlcl9fd29yZH0+XG4gICAgICAgICAgICAgICAgICB7d29yZH1cbiAgICAgICAgICAgICAgICA8L3NwYW4+XG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9KX1cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxDYW52YXNcbiAgICAgICAgICBvbk1vdXNlTW92ZT17KGUpID0+IHt9fVxuICAgICAgICAgIHNoYWRvd3NcbiAgICAgICAgICBjYW1lcmE9e3sgcG9zaXRpb246IFswLCAwLCA0XSB9fVxuXG4gICAgICAgICAgLy8gSW4gb3JkZXIgZm9yIHR3byBkb20gbm9kZXMgdG8gYmUgYWJsZSB0byByZWNlaXZlIGV2ZW50cyB0aGV5IG11c3Qgc2hhcmVcbiAgICAgICAgICAvLyB0aGUgc2FtZSBzb3VyY2UuIEJ5IHJlLWNvbm5lY3RpbmcgdGhlIGNhbnZhcyB0byBhIHBhcmVudCB0aGF0IGNvbnRhaW5zIHRoZVxuICAgICAgICAgIC8vIHRleHQgY29udGVudCBhcyB3ZWxsIGFzIHRoZSBjYW52YXMgd2UgZG8ganVzdCB0aGF0LlxuICAgICAgICA+XG4gICAgICAgICAgPGNvbG9yIGF0dGFjaD1cImJhY2tncm91bmRcIiBhcmdzPXtbJyMwMTAxMDEnXX0gLz5cbiAgICAgICAgICB7LyogPGFtYmllbnRMaWdodCBpbnRlbnNpdHk9ezAuNX0gLz5cbiAgICAgICAgICA8ZGlyZWN0aW9uYWxMaWdodFxuICAgICAgICAgICAgcG9zaXRpb249e1sxMCwgMTAsIDEwXX1cbiAgICAgICAgICAgIGFuZ2xlPXswLjE1fVxuICAgICAgICAgICAgcGVudW1icmE9ezF9XG4gICAgICAgICAgICBjYXN0U2hhZG93XG4gICAgICAgICAgICBzaGFkb3ctbWFwU2l6ZT17WzIwMjQsIDIwMjRdfVxuICAgICAgICAgIC8+XG4gICAgICAgICAgPHBvaW50TGlnaHQgcG9zaXRpb249e1sxMCwgMCwgMF19IC8+ICovfVxuICAgICAgICAgIDxCb3ggcG9zaXRpb249e1sxLjIsIDAsIDBdfSAvPlxuICAgICAgICAgIHsvKiA8U2hhZG93cyBwb3NpdGlvbj17WzAsIDAsIC0wLjVdfSAvPiAqL31cbiAgICAgICAgICA8RW52aXJvbm1lbnQgcmVzb2x1dGlvbj17MjU2fT5cbiAgICAgICAgICAgIDxncm91cCByb3RhdGlvbj17Wy1NYXRoLlBJIC8gMywgMCwgMV19PlxuICAgICAgICAgICAgICA8TGlnaHRmb3JtZXIgZm9ybT1cImNpcmNsZVwiIGludGVuc2l0eT17MTAwfSByb3RhdGlvbi14PXtNYXRoLlBJIC8gMn0gcG9zaXRpb249e1swLCA1LCAtOV19IHNjYWxlPXsyfSAvPlxuICAgICAgICAgICAgICA8TGlnaHRmb3JtZXIgZm9ybT1cImNpcmNsZVwiIGludGVuc2l0eT17Mn0gcm90YXRpb24teT17TWF0aC5QSSAvIDJ9IHBvc2l0aW9uPXtbLTUsIDEsIC0xXX0gc2NhbGU9ezJ9IC8+XG4gICAgICAgICAgICAgIDxMaWdodGZvcm1lciBmb3JtPVwiY2lyY2xlXCIgaW50ZW5zaXR5PXsyfSByb3RhdGlvbi15PXtNYXRoLlBJIC8gMn0gcG9zaXRpb249e1stNSwgLTEsIC0xXX0gc2NhbGU9ezJ9IC8+XG4gICAgICAgICAgICAgIDxMaWdodGZvcm1lciBmb3JtPVwiY2lyY2xlXCIgaW50ZW5zaXR5PXsyfSByb3RhdGlvbi15PXstTWF0aC5QSSAvIDJ9IHBvc2l0aW9uPXtbMTAsIDEsIDBdfSBzY2FsZT17OH0gLz5cbiAgICAgICAgICAgICAgPExpZ2h0Zm9ybWVyIGZvcm09XCJyaW5nXCIgY29sb3I9XCIjNDA2MGZmXCIgaW50ZW5zaXR5PXs4MH0gb25VcGRhdGU9eyhzZWxmKSA9PiBzZWxmLmxvb2tBdCgwLCAwLCAwKX0gcG9zaXRpb249e1sxMCwgMTAsIDBdfSBzY2FsZT17MTB9IC8+XG4gICAgICAgICAgICA8L2dyb3VwPlxuICAgICAgICAgIDwvRW52aXJvbm1lbnQ+XG4gICAgICAgICAgPEVmZmVjdENvbXBvc2VyIGRpc2FibGVOb3JtYWxQYXNzPlxuICAgICAgICAgICAgPE44QU8gYW9SYWRpdXM9ezF9IGludGVuc2l0eT17Mn0gLz5cbiAgICAgICAgICAgIHsvKiA8VGlsdFNoaWZ0MiBibHVyPXswLjJ9IC8+ICovfVxuICAgICAgICAgIDwvRWZmZWN0Q29tcG9zZXI+XG4gICAgICAgIDwvQ2FudmFzPlxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG4gICk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBMb2FkZXI7XG4iXSwibmFtZXMiOlsiUmVhY3QiLCJ1c2VFZmZlY3QiLCJ1c2VSZWYiLCJ1c2VTdGF0ZSIsIkNhbnZhcyIsInVzZVRocmVlIiwidXNlRnJhbWUiLCJ1c2VHTFRGIiwiRmxvYXQiLCJMaWdodGZvcm1lciIsIlRleHQiLCJIdG1sIiwiQ29udGFjdFNoYWRvd3MiLCJFbnZpcm9ubWVudCIsIk1lc2hUcmFuc21pc3Npb25NYXRlcmlhbCIsIkVmZmVjdENvbXBvc2VyIiwiTjhBTyIsIlRpbHRTaGlmdDIiLCJ3b3JkcyIsImdzYXAiLCJ1c2VDb250cm9scyIsIlRIUkVFIiwic3R5bGVzIiwiY29sbGFwc2VXb3JkcyIsImludHJvQW5pbWF0aW9uIiwicHJvZ3Jlc3NBbmltYXRpb24iLCJMb2FkZXIiLCJ0aW1lbGluZSIsImxvYWRlclJlZiIsInByb2dyZXNzUmVmIiwicHJvZ3Jlc3NOdW1iZXJSZWYiLCJ3b3JkR3JvdXBSZWYiLCJhZGQiLCJyZWYiLCJCb3giLCJwcm9wcyIsImNhbWVyYSIsInJheWNhc3RlciIsInBvaW50ZXIiLCJ2aWV3cG9ydCIsImNvbmZpZyIsIm1lc2hQaHlzaWNhbE1hdGVyaWFsIiwidHJhbnNtaXNzaW9uU2FtcGxlciIsImJhY2tzaWRlIiwic2FtcGxlcyIsInZhbHVlIiwibWluIiwibWF4Iiwic3RlcCIsInJlc29sdXRpb24iLCJ0cmFuc21pc3Npb24iLCJyb3VnaG5lc3MiLCJ0aGlja25lc3MiLCJpb3IiLCJjaHJvbWF0aWNBYmVycmF0aW9uIiwiYW5pc290cm9weSIsImFuaXNvdHJvcGljQmx1ciIsImRpc3RvcnRpb24iLCJkaXN0b3J0aW9uU2NhbGUiLCJ0ZW1wb3JhbERpc3RvcnRpb24iLCJjbGVhcmNvYXQiLCJhdHRlbnVhdGlvbkRpc3RhbmNlIiwiYXR0ZW51YXRpb25Db2xvciIsImNvbG9yIiwiYmciLCJzdGF0ZSIsImRlbHRhIiwiY3VycmVudCIsInByb2plY3RlZFBvc2l0aW9uIiwicG9zaXRpb24iLCJjbG9uZSIsInByb2plY3QiLCJkeCIsIngiLCJkeSIsInkiLCJkaXN0YW5jZSIsIk1hdGgiLCJzcXJ0Iiwicm90YXRpb24iLCJob3ZlcmVkIiwiaG92ZXIiLCJtZXNoIiwiY2FzdFNoYWRvdyIsIm9uUG9pbnRlck92ZXIiLCJldmVudCIsIm9uUG9pbnRlck91dCIsImJveEdlb21ldHJ5IiwiYXJncyIsIlNoYWRvd3MiLCJyZWNlaXZlU2hhZG93Iiwic2NhbGUiLCJ3aWR0aCIsImhlaWdodCIsInBsYW5lR2VvbWV0cnkiLCJzaGFkb3dNYXRlcmlhbCIsInRyYW5zcGFyZW50Iiwib3BhY2l0eSIsImRpdiIsImNsYXNzTmFtZSIsImxvYWRlcl9fd3JhcHBlciIsImxvYWRlcl9fcHJvZ3Jlc3NXcmFwcGVyIiwibG9hZGVyX19wcm9ncmVzcyIsInNwYW4iLCJsb2FkZXJfX3Byb2dyZXNzTnVtYmVyIiwibG9hZGVyIiwibG9hZGVyX193b3JkcyIsImxvYWRlcl9fb3ZlcmxheSIsImxvYWRlcl9fd29yZHNHcm91cCIsIm1hcCIsIndvcmQiLCJpbmRleCIsImxvYWRlcl9fd29yZCIsIm9uTW91c2VNb3ZlIiwiZSIsInNoYWRvd3MiLCJhdHRhY2giLCJncm91cCIsIlBJIiwiZm9ybSIsImludGVuc2l0eSIsInJvdGF0aW9uLXgiLCJyb3RhdGlvbi15Iiwib25VcGRhdGUiLCJzZWxmIiwibG9va0F0IiwiZGlzYWJsZU5vcm1hbFBhc3MiLCJhb1JhZGl1cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-client)/./app/components/Loader/index.js\n"));

/***/ }),

/***/ "(app-client)/./node_modules/@react-three/postprocessing/dist/effects/N8AO/BlueNoise.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@react-three/postprocessing/dist/effects/N8AO/BlueNoise.js ***!
  \*********************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ BlueNoise; }\n/* harmony export */ });\nconst BlueNoise = ``;\n\n//# sourceMappingURL=BlueNoise.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-client)/./node_modules/@react-three/postprocessing/dist/effects/N8AO/BlueNoise.js\n"));

/***/ }),

/***/ "(app-client)/./node_modules/@react-three/postprocessing/dist/effects/N8AO/DepthDownSample.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/@react-three/postprocessing/dist/effects/N8AO/DepthDownSample.js ***!
  \***************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DepthDownSample: function() { return /* binding */ DepthDownSample; }\n/* harmony export */ });\n/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! three */ \"(app-client)/./node_modules/three/build/three.module.js\");\n\nconst DepthDownSample = {\n  uniforms: {\n    sceneDepth: { value: null },\n    resolution: { value: new three__WEBPACK_IMPORTED_MODULE_0__.Vector2() },\n    near: { value: 0.1 },\n    far: { value: 1e3 },\n    viewMatrixInv: { value: new three__WEBPACK_IMPORTED_MODULE_0__.Matrix4() },\n    projectionMatrixInv: { value: new three__WEBPACK_IMPORTED_MODULE_0__.Matrix4() },\n    logDepth: { value: false }\n  },\n  depthWrite: false,\n  depthTest: false,\n  vertexShader: (\n    /* glsl */\n    `\n    varying vec2 vUv;\n    void main() {\n        vUv = uv;\n        gl_Position = vec4(position, 1);\n    }`\n  ),\n  fragmentShader: (\n    /* glsl */\n    `\n    uniform highp sampler2D sceneDepth;\n    uniform vec2 resolution;\n    uniform float near;\n    uniform float far;\n    uniform bool logDepth;\n    uniform mat4 viewMatrixInv;\n    uniform mat4 projectionMatrixInv;\n    varying vec2 vUv;\n    layout(location = 1) out vec4 gNormal;\n    vec3 getWorldPosLog(vec3 posS) {\n        vec2 uv = posS.xy;\n        float z = posS.z;\n        float nearZ =near;\n        float farZ = far;\n        float depth = pow(2.0, z * log2(farZ + 1.0)) - 1.0;\n        float a = farZ / (farZ - nearZ);\n        float b = farZ * nearZ / (nearZ - farZ);\n        float linDepth = a + b / depth;\n        vec4 clipVec = vec4(uv, linDepth, 1.0) * 2.0 - 1.0;\n        vec4 wpos = projectionMatrixInv * clipVec;\n        return wpos.xyz / wpos.w;\n      }\n      vec3 getWorldPos(float depth, vec2 coord) {\n        if (logDepth) {\n          return getWorldPosLog(vec3(coord, depth));\n        }\n        float z = depth * 2.0 - 1.0;\n        vec4 clipSpacePosition = vec4(coord * 2.0 - 1.0, z, 1.0);\n        vec4 viewSpacePosition = projectionMatrixInv * clipSpacePosition;\n        // Perspective division\n       vec4 worldSpacePosition = viewSpacePosition;\n       worldSpacePosition.xyz /= worldSpacePosition.w;\n        return worldSpacePosition.xyz;\n    }\n  \n    vec3 computeNormal(vec3 worldPos, vec2 vUv) {\n      ivec2 p = ivec2(vUv * resolution);\n      float c0 = texelFetch(sceneDepth, p, 0).x;\n      float l2 = texelFetch(sceneDepth, p - ivec2(2, 0), 0).x;\n      float l1 = texelFetch(sceneDepth, p - ivec2(1, 0), 0).x;\n      float r1 = texelFetch(sceneDepth, p + ivec2(1, 0), 0).x;\n      float r2 = texelFetch(sceneDepth, p + ivec2(2, 0), 0).x;\n      float b2 = texelFetch(sceneDepth, p - ivec2(0, 2), 0).x;\n      float b1 = texelFetch(sceneDepth, p - ivec2(0, 1), 0).x;\n      float t1 = texelFetch(sceneDepth, p + ivec2(0, 1), 0).x;\n      float t2 = texelFetch(sceneDepth, p + ivec2(0, 2), 0).x;\n  \n      float dl = abs((2.0 * l1 - l2) - c0);\n      float dr = abs((2.0 * r1 - r2) - c0);\n      float db = abs((2.0 * b1 - b2) - c0);\n      float dt = abs((2.0 * t1 - t2) - c0);\n  \n      vec3 ce = getWorldPos(c0, vUv).xyz;\n  \n      vec3 dpdx = (dl < dr) ? ce - getWorldPos(l1, (vUv - vec2(1.0 / resolution.x, 0.0))).xyz\n                            : -ce + getWorldPos(r1, (vUv + vec2(1.0 / resolution.x, 0.0))).xyz;\n      vec3 dpdy = (db < dt) ? ce - getWorldPos(b1, (vUv - vec2(0.0, 1.0 / resolution.y))).xyz\n                            : -ce + getWorldPos(t1, (vUv + vec2(0.0, 1.0 / resolution.y))).xyz;\n  \n      return normalize(cross(dpdx, dpdy));\n  }\n    void main() {\n        vec2 uv = vUv - vec2(0.5) / resolution;\n        vec2 pixelSize = vec2(1.0) / resolution;\n        vec2[] uvSamples = vec2[4](\n            uv,\n            uv + vec2(pixelSize.x, 0.0),\n            uv + vec2(0.0, pixelSize.y),\n            uv + pixelSize\n        );\n        float depth00 = texture2D(sceneDepth, uvSamples[0]).r;\n        float depth10 = texture2D(sceneDepth, uvSamples[1]).r;\n        float depth01 = texture2D(sceneDepth, uvSamples[2]).r;\n        float depth11 = texture2D(sceneDepth, uvSamples[3]).r;\n        float minDepth = min(min(depth00, depth10), min(depth01, depth11));\n        float maxDepth = max(max(depth00, depth10), max(depth01, depth11));\n        float targetDepth = minDepth;\n        // Checkerboard pattern to avoid artifacts\n        if (mod(gl_FragCoord.x + gl_FragCoord.y, 2.0) > 0.5) { \n            targetDepth = maxDepth;\n        }\n        int chosenIndex = 0;\n        float[] samples = float[4](depth00, depth10, depth01, depth11);\n        for(int i = 0; i < 4; ++i) {\n            if (samples[i] == targetDepth) {\n                chosenIndex = i;\n                break;\n            }\n        }\n        gl_FragColor = vec4(samples[chosenIndex], 0.0, 0.0, 1.0);\n        gNormal = vec4(computeNormal(\n            getWorldPos(samples[chosenIndex], uvSamples[chosenIndex]), uvSamples[chosenIndex]\n        ), 0.0);\n       /* float[] samples = float[4](depth00, depth10, depth01, depth11);\n        float c = 0.25 * (depth00 + depth10 + depth01 + depth11);\n        float[] distances = float[4](depth00, depth10, depth01, depth11);\n        float maxDistance = max(max(distances[0], distances[1]), max(distances[2], distances[3]));\n\n        int remaining[3];\n        int rejected[3];\n        int i, j, k;\n\n        for(i = 0, j = 0, k = 0; i < 4; ++i) {\n            if (distances[i] < maxDistance) {\n                remaining[j++] = i;\n            } else {\n                rejected[k++] = i;\n            }\n        }\n        for(;j < 3;++j) {\n            remaining[j] = rejected[--k];\n        }\n        vec3 s = vec3(\n            samples[remaining[0]],\n            samples[remaining[1]],\n            samples[remaining[2]]\n        );\n        c = (s.x + s.y + s.z) / 3.0;\n\n        distances[0] = abs(c - s.x);\n        distances[1] = abs(c - s.y);\n        distances[2] = abs(c - s.z);\n\n        float minDistance = min(min(distances[0], distances[1]), distances[2]);\n\n        for(i = 0; i < 3; ++i) {\n            if (distances[i] == minDistance) {\n                break;\n            }\n        }*/\n      /*  gl_FragColor = vec4(samples[remaining[i]], 0.0, 0.0, 0.0);\n        gNormal = vec4(computeNormal(\n            getWorldPos(samples[remaining[i]], uvSamples[remaining[i]]), uvSamples[remaining[i]]\n        ), 0.0);*/\n    }`\n  )\n};\n\n//# sourceMappingURL=DepthDownSample.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-client)/./node_modules/@react-three/postprocessing/dist/effects/N8AO/DepthDownSample.js\n"));

/***/ }),

/***/ "(app-client)/./node_modules/@react-three/postprocessing/dist/effects/N8AO/EffectCompositer.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/@react-three/postprocessing/dist/effects/N8AO/EffectCompositer.js ***!
  \****************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   EffectCompositer: function() { return /* binding */ EffectCompositer; }\n/* harmony export */ });\n/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! three */ \"(app-client)/./node_modules/three/build/three.module.js\");\n\nconst EffectCompositer = {\n  uniforms: {\n    sceneDiffuse: { value: null },\n    sceneDepth: { value: null },\n    tDiffuse: { value: null },\n    projMat: { value: new three__WEBPACK_IMPORTED_MODULE_0__.Matrix4() },\n    viewMat: { value: new three__WEBPACK_IMPORTED_MODULE_0__.Matrix4() },\n    projectionMatrixInv: { value: new three__WEBPACK_IMPORTED_MODULE_0__.Matrix4() },\n    viewMatrixInv: { value: new three__WEBPACK_IMPORTED_MODULE_0__.Matrix4() },\n    cameraPos: { value: new three__WEBPACK_IMPORTED_MODULE_0__.Vector3() },\n    resolution: { value: new three__WEBPACK_IMPORTED_MODULE_0__.Vector2() },\n    color: { value: new three__WEBPACK_IMPORTED_MODULE_0__.Vector3(0, 0, 0) },\n    blueNoise: { value: null },\n    downsampledDepth: { value: null },\n    time: { value: 0 },\n    intensity: { value: 10 },\n    renderMode: { value: 0 },\n    gammaCorrection: { value: false },\n    logDepth: { value: false },\n    ortho: { value: false },\n    near: { value: 0.1 },\n    far: { value: 1e3 },\n    screenSpaceRadius: { value: false },\n    radius: { value: 0 },\n    distanceFalloff: { value: 1 },\n    fog: { value: false },\n    fogExp: { value: false },\n    fogDensity: { value: 0 },\n    fogNear: { value: Infinity },\n    fogFar: { value: Infinity },\n    colorMultiply: { value: true }\n  },\n  depthWrite: false,\n  depthTest: false,\n  vertexShader: (\n    /* glsl */\n    `\n\t\tvarying vec2 vUv;\n\t\tvoid main() {\n\t\t\tvUv = uv;\n\t\t\tgl_Position = vec4(position, 1);\n\t\t}`\n  ),\n  fragmentShader: (\n    /* glsl */\n    `\n\t\tuniform sampler2D sceneDiffuse;\n    uniform highp sampler2D sceneDepth;\n    uniform highp sampler2D downsampledDepth;\n    uniform sampler2D tDiffuse;\n    uniform sampler2D blueNoise;\n    uniform vec2 resolution;\n    uniform vec3 color;\n    uniform mat4 projectionMatrixInv;\n    uniform mat4 viewMatrixInv;\n    uniform float intensity;\n    uniform float renderMode;\n    uniform float near;\n    uniform float far;\n    uniform bool gammaCorrection;\n    uniform bool logDepth;\n    uniform bool ortho;\n    uniform bool screenSpaceRadius;\n    uniform bool fog;\n    uniform bool fogExp;\n    uniform bool colorMultiply;\n    uniform float fogDensity;\n    uniform float fogNear;\n    uniform float fogFar;\n    uniform float radius;\n    uniform float distanceFalloff;\n    uniform vec3 cameraPos;\n    varying vec2 vUv;\n    highp float linearize_depth(highp float d, highp float zNear,highp float zFar)\n    {\n        return (zFar * zNear) / (zFar - d * (zFar - zNear));\n    }\n    highp float linearize_depth_ortho(highp float d, highp float nearZ, highp float farZ) {\n      return nearZ + (farZ - nearZ) * d;\n    }\n    highp float linearize_depth_log(highp float d, highp float nearZ,highp float farZ) {\n      float depth = pow(2.0, d * log2(farZ + 1.0)) - 1.0;\n      float a = farZ / (farZ - nearZ);\n      float b = farZ * nearZ / (nearZ - farZ);\n      float linDepth = a + b / depth;\n      return ortho ? linearize_depth_ortho(\n        linDepth,\n        nearZ,\n        farZ\n      ) :linearize_depth(linDepth, nearZ, farZ);\n    }\n    vec3 getWorldPosLog(vec3 posS) {\n        vec2 uv = posS.xy;\n        float z = posS.z;\n        float nearZ =near;\n        float farZ = far;\n        float depth = pow(2.0, z * log2(farZ + 1.0)) - 1.0;\n        float a = farZ / (farZ - nearZ);\n        float b = farZ * nearZ / (nearZ - farZ);\n        float linDepth = a + b / depth;\n        vec4 clipVec = vec4(uv, linDepth, 1.0) * 2.0 - 1.0;\n        vec4 wpos = projectionMatrixInv * clipVec;\n        return wpos.xyz / wpos.w;\n      }\n      vec3 getWorldPos(float depth, vec2 coord) {\n       // if (logDepth) {\n        #ifdef LOGDEPTH\n          return getWorldPosLog(vec3(coord, depth));\n        #endif\n      //  }\n        float z = depth * 2.0 - 1.0;\n        vec4 clipSpacePosition = vec4(coord * 2.0 - 1.0, z, 1.0);\n        vec4 viewSpacePosition = projectionMatrixInv * clipSpacePosition;\n        // Perspective division\n       vec4 worldSpacePosition = viewSpacePosition;\n       worldSpacePosition.xyz /= worldSpacePosition.w;\n        return worldSpacePosition.xyz;\n    }\n  \n    vec3 computeNormal(vec3 worldPos, vec2 vUv) {\n      ivec2 p = ivec2(vUv * resolution);\n      float c0 = texelFetch(sceneDepth, p, 0).x;\n      float l2 = texelFetch(sceneDepth, p - ivec2(2, 0), 0).x;\n      float l1 = texelFetch(sceneDepth, p - ivec2(1, 0), 0).x;\n      float r1 = texelFetch(sceneDepth, p + ivec2(1, 0), 0).x;\n      float r2 = texelFetch(sceneDepth, p + ivec2(2, 0), 0).x;\n      float b2 = texelFetch(sceneDepth, p - ivec2(0, 2), 0).x;\n      float b1 = texelFetch(sceneDepth, p - ivec2(0, 1), 0).x;\n      float t1 = texelFetch(sceneDepth, p + ivec2(0, 1), 0).x;\n      float t2 = texelFetch(sceneDepth, p + ivec2(0, 2), 0).x;\n  \n      float dl = abs((2.0 * l1 - l2) - c0);\n      float dr = abs((2.0 * r1 - r2) - c0);\n      float db = abs((2.0 * b1 - b2) - c0);\n      float dt = abs((2.0 * t1 - t2) - c0);\n  \n      vec3 ce = getWorldPos(c0, vUv).xyz;\n  \n      vec3 dpdx = (dl < dr) ? ce - getWorldPos(l1, (vUv - vec2(1.0 / resolution.x, 0.0))).xyz\n                            : -ce + getWorldPos(r1, (vUv + vec2(1.0 / resolution.x, 0.0))).xyz;\n      vec3 dpdy = (db < dt) ? ce - getWorldPos(b1, (vUv - vec2(0.0, 1.0 / resolution.y))).xyz\n                            : -ce + getWorldPos(t1, (vUv + vec2(0.0, 1.0 / resolution.y))).xyz;\n  \n      return normalize(cross(dpdx, dpdy));\n  }\n\n    #include <common>\n    #include <dithering_pars_fragment>\n    void main() {\n        //vec4 texel = texture2D(tDiffuse, vUv);//vec3(0.0);\n        vec4 sceneTexel = texture2D(sceneDiffuse, vUv);\n        float depth = texture2D(\n            sceneDepth,\n            vUv\n        ).x;\n        #ifdef HALFRES \n        vec4 texel;\n        if (depth == 1.0) {\n            texel = vec4(0.0, 0.0, 0.0, 1.0);\n        } else {\n        vec3 worldPos = getWorldPos(depth, vUv);\n        vec3 normal = computeNormal(getWorldPos(depth, vUv), vUv);\n       // vec4 texel = texture2D(tDiffuse, vUv);\n       // Find closest depth;\n       float totalWeight = 0.0;\n       float radiusToUse = screenSpaceRadius ? distance(\n        worldPos,\n        getWorldPos(depth, vUv +\n          vec2(radius, 0.0) / resolution)\n      ) : radius;\n      float distanceFalloffToUse =screenSpaceRadius ?\n          radiusToUse * distanceFalloff\n      : distanceFalloff;\n        for(float x = -1.0; x <= 1.0; x++) {\n            for(float y = -1.0; y <= 1.0; y++) {\n                vec2 offset = vec2(x, y);\n                ivec2 p = ivec2(\n                    (vUv * resolution * 0.5) + offset\n                );\n                vec2 pUv = vec2(p) / (resolution * 0.5);\n                float sampleDepth = texelFetch(downsampledDepth,p, 0).x;\n                vec4 sampleInfo = texelFetch(tDiffuse, p, 0);\n                vec3 normalSample = sampleInfo.xyz * 2.0 - 1.0;\n                vec3 worldPosSample = getWorldPos(sampleDepth, pUv);\n                float tangentPlaneDist = abs(dot(worldPos - worldPosSample, normal));\n                float rangeCheck = exp(-1.0 * tangentPlaneDist * (1.0 / distanceFalloffToUse)) * max(dot(normal, normalSample), 0.0);\n                float weight = rangeCheck;\n                totalWeight += weight;\n                texel += sampleInfo * weight;\n            }\n        }\n        if (totalWeight == 0.0) {\n            texel = texture2D(tDiffuse, vUv);\n        } else {\n            texel /= totalWeight;\n        }\n    }\n        #else\n        vec4 texel = texture2D(tDiffuse, vUv);\n        #endif\n\n        #ifdef LOGDEPTH\n        texel.a = clamp(texel.a, 0.0, 1.0);\n        if (texel.a == 0.0) {\n          texel.a = 1.0;\n        }\n        #endif\n     \n        float finalAo = pow(texel.a, intensity);\n        float fogFactor;\n        float fogDepth = distance(\n            cameraPos,\n            getWorldPos(depth, vUv)\n        );\n        if (fog) {\n            if (fogExp) {\n                fogFactor = 1.0 - exp( - fogDensity * fogDensity * fogDepth * fogDepth );\n            } else {\n                fogFactor = smoothstep( fogNear, fogFar, fogDepth );\n            }\n        }\n        finalAo = mix(finalAo, 1.0, fogFactor);\n        vec3 aoApplied = color * mix(vec3(1.0), sceneTexel.rgb, float(colorMultiply));\n        if (renderMode == 0.0) {\n            gl_FragColor = vec4( mix(sceneTexel.rgb, aoApplied, 1.0 - finalAo), sceneTexel.a);\n        } else if (renderMode == 1.0) {\n            gl_FragColor = vec4( mix(vec3(1.0), aoApplied, 1.0 - finalAo), sceneTexel.a);\n        } else if (renderMode == 2.0) {\n            gl_FragColor = vec4( sceneTexel.rgb, sceneTexel.a);\n        } else if (renderMode == 3.0) {\n            if (vUv.x < 0.5) {\n                gl_FragColor = vec4( sceneTexel.rgb, sceneTexel.a);\n            } else if (abs(vUv.x - 0.5) < 1.0 / resolution.x) {\n                gl_FragColor = vec4(1.0);\n            } else {\n                gl_FragColor = vec4( mix(sceneTexel.rgb, aoApplied, 1.0 - finalAo), sceneTexel.a);\n            }\n        } else if (renderMode == 4.0) {\n            if (vUv.x < 0.5) {\n                gl_FragColor = vec4( sceneTexel.rgb, sceneTexel.a);\n            } else if (abs(vUv.x - 0.5) < 1.0 / resolution.x) {\n                gl_FragColor = vec4(1.0);\n            } else {\n                gl_FragColor = vec4( mix(vec3(1.0), aoApplied, 1.0 - finalAo), sceneTexel.a);\n            }\n        }\n        #include <dithering_fragment>\n        if (gammaCorrection) {\n            gl_FragColor = LinearTosRGB(gl_FragColor);\n        }\n    }\n    `\n  )\n};\n\n//# sourceMappingURL=EffectCompositer.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-client)/./node_modules/@react-three/postprocessing/dist/effects/N8AO/EffectCompositer.js\n"));

/***/ }),

/***/ "(app-client)/./node_modules/@react-three/postprocessing/dist/effects/N8AO/EffectShader.js":
/*!************************************************************************************!*\
  !*** ./node_modules/@react-three/postprocessing/dist/effects/N8AO/EffectShader.js ***!
  \************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   EffectShader: function() { return /* binding */ EffectShader; }\n/* harmony export */ });\n/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! three */ \"(app-client)/./node_modules/three/build/three.module.js\");\n\nconst EffectShader = {\n  uniforms: {\n    sceneDiffuse: { value: null },\n    sceneDepth: { value: null },\n    sceneNormal: { value: null },\n    projMat: { value: new three__WEBPACK_IMPORTED_MODULE_0__.Matrix4() },\n    viewMat: { value: new three__WEBPACK_IMPORTED_MODULE_0__.Matrix4() },\n    projViewMat: { value: new three__WEBPACK_IMPORTED_MODULE_0__.Matrix4() },\n    projectionMatrixInv: { value: new three__WEBPACK_IMPORTED_MODULE_0__.Matrix4() },\n    viewMatrixInv: { value: new three__WEBPACK_IMPORTED_MODULE_0__.Matrix4() },\n    cameraPos: { value: new three__WEBPACK_IMPORTED_MODULE_0__.Vector3() },\n    resolution: { value: new three__WEBPACK_IMPORTED_MODULE_0__.Vector2() },\n    time: { value: 0 },\n    samples: { value: [] },\n    samplesR: { value: [] },\n    bluenoise: { value: null },\n    distanceFalloff: { value: 1 },\n    radius: { value: 5 },\n    near: { value: 0.1 },\n    far: { value: 1e3 },\n    logDepth: { value: false },\n    ortho: { value: false },\n    screenSpaceRadius: { value: false }\n  },\n  depthWrite: false,\n  depthTest: false,\n  vertexShader: (\n    /* glsl */\n    `\nvarying vec2 vUv;\nvoid main() {\n  vUv = uv;\n  gl_Position = vec4(position, 1);\n}`\n  ),\n  fragmentShader: (\n    /* glsl */\n    `\n    #define SAMPLES 16\n    #define FSAMPLES 16.0\nuniform sampler2D sceneDiffuse;\nuniform highp sampler2D sceneNormal;\nuniform highp sampler2D sceneDepth;\nuniform mat4 projectionMatrixInv;\nuniform mat4 viewMatrixInv;\nuniform mat4 projMat;\nuniform mat4 viewMat;\nuniform mat4 projViewMat;\nuniform vec3 cameraPos;\nuniform vec2 resolution;\nuniform float time;\nuniform vec3[SAMPLES] samples;\nuniform float[SAMPLES] samplesR;\nuniform float radius;\nuniform float distanceFalloff;\nuniform float near;\nuniform float far;\nuniform bool logDepth;\nuniform bool ortho;\nuniform bool screenSpaceRadius;\nuniform sampler2D bluenoise;\n    varying vec2 vUv;\n    highp float linearize_depth(highp float d, highp float zNear,highp float zFar)\n    {\n        return (zFar * zNear) / (zFar - d * (zFar - zNear));\n    }\n    highp float linearize_depth_ortho(highp float d, highp float nearZ, highp float farZ) {\n      return nearZ + (farZ - nearZ) * d;\n    }\n    highp float linearize_depth_log(highp float d, highp float nearZ,highp float farZ) {\n      float depth = pow(2.0, d * log2(farZ + 1.0)) - 1.0;\n      float a = farZ / (farZ - nearZ);\n      float b = farZ * nearZ / (nearZ - farZ);\n      float linDepth = a + b / depth;\n      return ortho ? linearize_depth_ortho(\n        linDepth,\n        nearZ,\n        farZ\n      ) :linearize_depth(linDepth, nearZ, farZ);\n    }\n\n    vec3 getWorldPosLog(vec3 posS) {\n      vec2 uv = posS.xy;\n      float z = posS.z;\n      float nearZ =near;\n      float farZ = far;\n      float depth = pow(2.0, z * log2(farZ + 1.0)) - 1.0;\n      float a = farZ / (farZ - nearZ);\n      float b = farZ * nearZ / (nearZ - farZ);\n      float linDepth = a + b / depth;\n      vec4 clipVec = vec4(uv, linDepth, 1.0) * 2.0 - 1.0;\n      vec4 wpos = projectionMatrixInv * clipVec;\n      return wpos.xyz / wpos.w;\n    }\n    vec3 getWorldPos(float depth, vec2 coord) {\n      #ifdef LOGDEPTH\n        return getWorldPosLog(vec3(coord, depth));\n      #endif\n      float z = depth * 2.0 - 1.0;\n      vec4 clipSpacePosition = vec4(coord * 2.0 - 1.0, z, 1.0);\n      vec4 viewSpacePosition = projectionMatrixInv * clipSpacePosition;\n      // Perspective division\n     vec4 worldSpacePosition = viewSpacePosition;\n     worldSpacePosition.xyz /= worldSpacePosition.w;\n      return worldSpacePosition.xyz;\n  }\n\n  vec3 computeNormal(vec3 worldPos, vec2 vUv) {\n    ivec2 p = ivec2(vUv * resolution);\n    float c0 = texelFetch(sceneDepth, p, 0).x;\n    float l2 = texelFetch(sceneDepth, p - ivec2(2, 0), 0).x;\n    float l1 = texelFetch(sceneDepth, p - ivec2(1, 0), 0).x;\n    float r1 = texelFetch(sceneDepth, p + ivec2(1, 0), 0).x;\n    float r2 = texelFetch(sceneDepth, p + ivec2(2, 0), 0).x;\n    float b2 = texelFetch(sceneDepth, p - ivec2(0, 2), 0).x;\n    float b1 = texelFetch(sceneDepth, p - ivec2(0, 1), 0).x;\n    float t1 = texelFetch(sceneDepth, p + ivec2(0, 1), 0).x;\n    float t2 = texelFetch(sceneDepth, p + ivec2(0, 2), 0).x;\n\n    float dl = abs((2.0 * l1 - l2) - c0);\n    float dr = abs((2.0 * r1 - r2) - c0);\n    float db = abs((2.0 * b1 - b2) - c0);\n    float dt = abs((2.0 * t1 - t2) - c0);\n\n    vec3 ce = getWorldPos(c0, vUv).xyz;\n\n    vec3 dpdx = (dl < dr) ? ce - getWorldPos(l1, (vUv - vec2(1.0 / resolution.x, 0.0))).xyz\n                          : -ce + getWorldPos(r1, (vUv + vec2(1.0 / resolution.x, 0.0))).xyz;\n    vec3 dpdy = (db < dt) ? ce - getWorldPos(b1, (vUv - vec2(0.0, 1.0 / resolution.y))).xyz\n                          : -ce + getWorldPos(t1, (vUv + vec2(0.0, 1.0 / resolution.y))).xyz;\n\n    return normalize(cross(dpdx, dpdy));\n}\n\nvoid main() {\n      vec4 diffuse = texture2D(sceneDiffuse, vUv);\n      float depth = texture2D(sceneDepth, vUv).x;\n      if (depth == 1.0) {\n        gl_FragColor = vec4(vec3(1.0), 1.0);\n        return;\n      }\n      vec3 worldPos = getWorldPos(depth, vUv);\n    //  vec3 normal = texture2D(sceneNormal, vUv).rgb;//computeNormal(worldPos, vUv);\n      #ifdef HALFRES\n        vec3 normal = texture2D(sceneNormal, vUv).rgb;\n      #else\n        vec3 normal = computeNormal(worldPos, vUv);\n      #endif\n      vec4 noise = texture2D(bluenoise, gl_FragCoord.xy / 128.0);\n      vec3 randomVec = normalize(noise.rgb * 2.0 - 1.0);\n      vec3 tangent = normalize(randomVec - normal * dot(randomVec, normal));\n      vec3 bitangent = cross(normal, tangent);\n      mat3 tbn = mat3(tangent, bitangent, normal);\n      float occluded = 0.0;\n      float totalWeight = 0.0;\n     /* float radiusScreen = distance(\n        worldPos,\n        getWorldPos(depth, vUv + \n          vec2(48.0, 0.0) / resolution)\n      );/*vUv.x < 0.5 ? radius : min(distance(\n        worldPos,\n        getWorldPos(depth, vUv + \n          vec2(100.0, 0.0) / resolution)\n      ), radius);\n      float distanceFalloffScreen = radiusScreen * 0.2;*/\n      float radiusToUse = screenSpaceRadius ? distance(\n        worldPos,\n        getWorldPos(depth, vUv +\n          vec2(radius, 0.0) / resolution)\n      ) : radius;\n      float distanceFalloffToUse =screenSpaceRadius ?\n          radiusToUse * distanceFalloff\n      : distanceFalloff;\n      float bias = (0.1 / near) * fwidth(distance(worldPos, cameraPos)) / radiusToUse;\n      for(float i = 0.0; i < FSAMPLES; i++) {\n        vec3 sampleDirection = \n        tbn * \n        samples[int(i)];\n        ;\n        float moveAmt = samplesR[int(mod(i + noise.a * FSAMPLES, FSAMPLES))];\n        vec3 samplePos = worldPos + radiusToUse * moveAmt * sampleDirection;\n        vec4 offset = projMat * vec4(samplePos, 1.0);\n        offset.xyz /= offset.w;\n        offset.xyz = offset.xyz * 0.5 + 0.5;\n        float sampleDepth = textureLod(sceneDepth, offset.xy, 0.0).x;\n        /*float distSample = logDepth ? linearize_depth_log(sampleDepth, near, far) \n         (ortho ?  linearize_depth_ortho(sampleDepth, near, far) : linearize_depth(sampleDepth, near, far));*/\n        #ifdef LOGDEPTH\n        float distSample = linearize_depth_log(sampleDepth, near, far);\n        #else\n        float distSample = ortho ? linearize_depth_ortho(sampleDepth, near, far) : linearize_depth(sampleDepth, near, far);\n        #endif\n        float distWorld = ortho ? linearize_depth_ortho(offset.z, near, far) : linearize_depth(offset.z, near, far);\n        float rangeCheck = smoothstep(0.0, 1.0, distanceFalloffToUse / (abs(distSample - distWorld)));\n        vec2 diff = gl_FragCoord.xy - ( offset.xy * resolution);\n        float weight = dot(sampleDirection, normal);\n          occluded += rangeCheck * weight * \n            (distSample + bias\n               < distWorld ? 1.0 : 0.0) * (\n          (dot(\n            diff,\n            diff\n             \n            ) < 1.0 || (sampleDepth == depth) || (\n              offset.x < 0.0 || offset.x > 1.0 || offset.y < 0.0 || offset.y > 1.0\n            ) ? 0.0 : 1.0)\n          );\n          totalWeight += weight;\n      }\n      float occ = clamp(1.0 - occluded / totalWeight, 0.0, 1.0);\n      gl_FragColor = vec4(0.5 + 0.5 * normal, occ);\n}`\n  )\n};\n\n//# sourceMappingURL=EffectShader.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-client)/./node_modules/@react-three/postprocessing/dist/effects/N8AO/EffectShader.js\n"));

/***/ }),

/***/ "(app-client)/./node_modules/@react-three/postprocessing/dist/effects/N8AO/FullScreenTriangle.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/@react-three/postprocessing/dist/effects/N8AO/FullScreenTriangle.js ***!
  \******************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   FullScreenTriangle: function() { return /* binding */ FullScreenTriangle; }\n/* harmony export */ });\n/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! three */ \"(app-client)/./node_modules/three/build/three.module.js\");\nvar __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __publicField = (obj, key, value) => {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n  return value;\n};\n\nclass FullScreenTriangleGeometry extends three__WEBPACK_IMPORTED_MODULE_0__.BufferGeometry {\n  constructor() {\n    super();\n    __publicField(this, \"boundingSphere\", new three__WEBPACK_IMPORTED_MODULE_0__.Sphere());\n    this.setAttribute(\"position\", new three__WEBPACK_IMPORTED_MODULE_0__.BufferAttribute(new Float32Array([-1, -1, 3, -1, -1, 3]), 2));\n    this.setAttribute(\"uv\", new three__WEBPACK_IMPORTED_MODULE_0__.BufferAttribute(new Float32Array([0, 0, 2, 0, 0, 2]), 2));\n  }\n  computeBoundingSphere() {\n  }\n}\nconst _geometry = new FullScreenTriangleGeometry();\nconst _camera = new three__WEBPACK_IMPORTED_MODULE_0__.OrthographicCamera();\nclass FullScreenTriangle {\n  constructor(material) {\n    this._mesh = new three__WEBPACK_IMPORTED_MODULE_0__.Mesh(_geometry, material);\n    this._mesh.frustumCulled = false;\n  }\n  render(renderer) {\n    renderer.render(this._mesh, _camera);\n  }\n  get material() {\n    return this._mesh.material;\n  }\n  set material(value) {\n    this._mesh.material = value;\n  }\n  dispose() {\n    this._mesh.material.dispose();\n    this._mesh.geometry.dispose();\n  }\n}\n\n//# sourceMappingURL=FullScreenTriangle.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1jbGllbnQpLy4vbm9kZV9tb2R1bGVzL0ByZWFjdC10aHJlZS9wb3N0cHJvY2Vzc2luZy9kaXN0L2VmZmVjdHMvTjhBTy9GdWxsU2NyZWVuVHJpYW5nbGUuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQTtBQUNBLDhFQUE4RSw2REFBNkQ7QUFDM0k7QUFDQTtBQUNBO0FBQ0E7QUFDK0I7QUFDL0IseUNBQXlDLGlEQUFvQjtBQUM3RDtBQUNBO0FBQ0EsOENBQThDLHlDQUFZO0FBQzFELHNDQUFzQyxrREFBcUI7QUFDM0QsZ0NBQWdDLGtEQUFxQjtBQUNyRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLHFEQUF3QjtBQUM1QztBQUNBO0FBQ0EscUJBQXFCLHVDQUFVO0FBQy9CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBR0U7QUFDRiIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQHJlYWN0LXRocmVlL3Bvc3Rwcm9jZXNzaW5nL2Rpc3QvZWZmZWN0cy9OOEFPL0Z1bGxTY3JlZW5UcmlhbmdsZS5qcz9hZjNlIl0sInNvdXJjZXNDb250ZW50IjpbInZhciBfX2RlZlByb3AgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG52YXIgX19kZWZOb3JtYWxQcm9wID0gKG9iaiwga2V5LCB2YWx1ZSkgPT4ga2V5IGluIG9iaiA/IF9fZGVmUHJvcChvYmosIGtleSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUsIHdyaXRhYmxlOiB0cnVlLCB2YWx1ZSB9KSA6IG9ialtrZXldID0gdmFsdWU7XG52YXIgX19wdWJsaWNGaWVsZCA9IChvYmosIGtleSwgdmFsdWUpID0+IHtcbiAgX19kZWZOb3JtYWxQcm9wKG9iaiwgdHlwZW9mIGtleSAhPT0gXCJzeW1ib2xcIiA/IGtleSArIFwiXCIgOiBrZXksIHZhbHVlKTtcbiAgcmV0dXJuIHZhbHVlO1xufTtcbmltcG9ydCAqIGFzIFRIUkVFIGZyb20gXCJ0aHJlZVwiO1xuY2xhc3MgRnVsbFNjcmVlblRyaWFuZ2xlR2VvbWV0cnkgZXh0ZW5kcyBUSFJFRS5CdWZmZXJHZW9tZXRyeSB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKCk7XG4gICAgX19wdWJsaWNGaWVsZCh0aGlzLCBcImJvdW5kaW5nU3BoZXJlXCIsIG5ldyBUSFJFRS5TcGhlcmUoKSk7XG4gICAgdGhpcy5zZXRBdHRyaWJ1dGUoXCJwb3NpdGlvblwiLCBuZXcgVEhSRUUuQnVmZmVyQXR0cmlidXRlKG5ldyBGbG9hdDMyQXJyYXkoWy0xLCAtMSwgMywgLTEsIC0xLCAzXSksIDIpKTtcbiAgICB0aGlzLnNldEF0dHJpYnV0ZShcInV2XCIsIG5ldyBUSFJFRS5CdWZmZXJBdHRyaWJ1dGUobmV3IEZsb2F0MzJBcnJheShbMCwgMCwgMiwgMCwgMCwgMl0pLCAyKSk7XG4gIH1cbiAgY29tcHV0ZUJvdW5kaW5nU3BoZXJlKCkge1xuICB9XG59XG5jb25zdCBfZ2VvbWV0cnkgPSBuZXcgRnVsbFNjcmVlblRyaWFuZ2xlR2VvbWV0cnkoKTtcbmNvbnN0IF9jYW1lcmEgPSBuZXcgVEhSRUUuT3J0aG9ncmFwaGljQ2FtZXJhKCk7XG5jbGFzcyBGdWxsU2NyZWVuVHJpYW5nbGUge1xuICBjb25zdHJ1Y3RvcihtYXRlcmlhbCkge1xuICAgIHRoaXMuX21lc2ggPSBuZXcgVEhSRUUuTWVzaChfZ2VvbWV0cnksIG1hdGVyaWFsKTtcbiAgICB0aGlzLl9tZXNoLmZydXN0dW1DdWxsZWQgPSBmYWxzZTtcbiAgfVxuICByZW5kZXIocmVuZGVyZXIpIHtcbiAgICByZW5kZXJlci5yZW5kZXIodGhpcy5fbWVzaCwgX2NhbWVyYSk7XG4gIH1cbiAgZ2V0IG1hdGVyaWFsKCkge1xuICAgIHJldHVybiB0aGlzLl9tZXNoLm1hdGVyaWFsO1xuICB9XG4gIHNldCBtYXRlcmlhbCh2YWx1ZSkge1xuICAgIHRoaXMuX21lc2gubWF0ZXJpYWwgPSB2YWx1ZTtcbiAgfVxuICBkaXNwb3NlKCkge1xuICAgIHRoaXMuX21lc2gubWF0ZXJpYWwuZGlzcG9zZSgpO1xuICAgIHRoaXMuX21lc2guZ2VvbWV0cnkuZGlzcG9zZSgpO1xuICB9XG59XG5leHBvcnQge1xuICBGdWxsU2NyZWVuVHJpYW5nbGVcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1GdWxsU2NyZWVuVHJpYW5nbGUuanMubWFwXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-client)/./node_modules/@react-three/postprocessing/dist/effects/N8AO/FullScreenTriangle.js\n"));

/***/ }),

/***/ "(app-client)/./node_modules/@react-three/postprocessing/dist/effects/N8AO/N8AOPostPass.js":
/*!************************************************************************************!*\
  !*** ./node_modules/@react-three/postprocessing/dist/effects/N8AO/N8AOPostPass.js ***!
  \************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   N8AOPostPass: function() { return /* binding */ N8AOPostPass; }\n/* harmony export */ });\n/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! three */ \"(app-client)/./node_modules/three/build/three.module.js\");\n/* harmony import */ var postprocessing__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! postprocessing */ \"(app-client)/./node_modules/postprocessing/build/index.js\");\n/* harmony import */ var buffer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! buffer */ \"(app-client)/./node_modules/buffer/index.js\");\n/* harmony import */ var _FullScreenTriangle_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./FullScreenTriangle.js */ \"(app-client)/./node_modules/@react-three/postprocessing/dist/effects/N8AO/FullScreenTriangle.js\");\n/* harmony import */ var _EffectShader_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./EffectShader.js */ \"(app-client)/./node_modules/@react-three/postprocessing/dist/effects/N8AO/EffectShader.js\");\n/* harmony import */ var _EffectCompositer_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./EffectCompositer.js */ \"(app-client)/./node_modules/@react-three/postprocessing/dist/effects/N8AO/EffectCompositer.js\");\n/* harmony import */ var _PoissionBlur_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./PoissionBlur.js */ \"(app-client)/./node_modules/@react-three/postprocessing/dist/effects/N8AO/PoissionBlur.js\");\n/* harmony import */ var _DepthDownSample_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./DepthDownSample.js */ \"(app-client)/./node_modules/@react-three/postprocessing/dist/effects/N8AO/DepthDownSample.js\");\n/* harmony import */ var _BlueNoise_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./BlueNoise.js */ \"(app-client)/./node_modules/@react-three/postprocessing/dist/effects/N8AO/BlueNoise.js\");\n\n\n\n\n\n\n\n\n\nconst bluenoiseBits = buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.from(_BlueNoise_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"], \"base64\");\nfunction checkTimerQuery(timerQuery, gl, pass) {\n  const available = gl.getQueryParameter(timerQuery, gl.QUERY_RESULT_AVAILABLE);\n  if (available) {\n    const elapsedTimeInNs = gl.getQueryParameter(timerQuery, gl.QUERY_RESULT);\n    const elapsedTimeInMs = elapsedTimeInNs / 1e6;\n    pass.lastTime = elapsedTimeInMs;\n  } else {\n    setTimeout(() => {\n      checkTimerQuery(timerQuery, gl, pass);\n    }, 1);\n  }\n}\nclass N8AOPostPass extends postprocessing__WEBPACK_IMPORTED_MODULE_2__.Pass {\n  /**\n   *\n   * @param {THREE.Scene} scene\n   * @param {THREE.Camera} camera\n   * @param {number} width\n   * @param {number} height\n   *\n   * @property {THREE.Scene} scene\n   * @property {THREE.Camera} camera\n   * @property {number} width\n   * @property {number} height\n   */\n  constructor(scene, camera, width = 512, height = 512) {\n    super();\n    this.width = width;\n    this.height = height;\n    this.clear = true;\n    this.camera = camera;\n    this.scene = scene;\n    this.autosetGamma = true;\n    this.configuration = new Proxy(\n      {\n        aoSamples: 16,\n        aoRadius: 5,\n        denoiseSamples: 8,\n        denoiseRadius: 12,\n        distanceFalloff: 1,\n        intensity: 5,\n        denoiseIterations: 2,\n        renderMode: 0,\n        color: new three__WEBPACK_IMPORTED_MODULE_3__.Color(0, 0, 0),\n        gammaCorrection: true,\n        logarithmicDepthBuffer: false,\n        screenSpaceRadius: false,\n        halfRes: false,\n        depthAwareUpsampling: true,\n        colorMultiply: true\n      },\n      {\n        set: (target, propName, value) => {\n          const oldProp = target[propName];\n          target[propName] = value;\n          if (propName === \"aoSamples\" && oldProp !== value) {\n            this.configureAOPass(this.configuration.logarithmicDepthBuffer);\n          }\n          if (propName === \"denoiseSamples\" && oldProp !== value) {\n            this.configureDenoisePass(this.configuration.logarithmicDepthBuffer);\n          }\n          if (propName === \"halfRes\" && oldProp !== value) {\n            this.configureAOPass(this.configuration.logarithmicDepthBuffer);\n            this.configureHalfResTargets();\n            this.configureEffectCompositer(this.configuration.logarithmicDepthBuffer);\n            this.setSize(this.width, this.height);\n          }\n          if (propName === \"depthAwareUpsampling\" && oldProp !== value) {\n            this.configureEffectCompositer(this.configuration.logarithmicDepthBuffer);\n          }\n          if (propName === \"gammaCorrection\") {\n            this.autosetGamma = false;\n          }\n          return true;\n        }\n      }\n    );\n    this.samples = [];\n    this.samplesR = [];\n    this.samplesDenoise = [];\n    this.configureEffectCompositer(this.configuration.logarithmicDepthBuffer);\n    this.configureSampleDependentPasses();\n    this.configureHalfResTargets();\n    this.copyQuad = new _FullScreenTriangle_js__WEBPACK_IMPORTED_MODULE_4__.FullScreenTriangle(\n      new three__WEBPACK_IMPORTED_MODULE_3__.ShaderMaterial({\n        uniforms: {\n          tDiffuse: {\n            value: null\n          }\n        },\n        depthWrite: false,\n        vertexShader: `\n            varying vec2 vUv;\n            void main() {\n                vUv = uv;\n                gl_Position = vec4(position, 1);\n            }\n            `,\n        fragmentShader: `\n            uniform sampler2D tDiffuse;\n            varying vec2 vUv;\n            void main() {\n                gl_FragColor = texture2D(tDiffuse, vUv);\n            }\n            `\n      })\n    );\n    this.writeTargetInternal = new three__WEBPACK_IMPORTED_MODULE_3__.WebGLRenderTarget(this.width, this.height, {\n      minFilter: three__WEBPACK_IMPORTED_MODULE_3__.LinearFilter,\n      magFilter: three__WEBPACK_IMPORTED_MODULE_3__.LinearFilter,\n      depthBuffer: false\n    });\n    this.readTargetInternal = new three__WEBPACK_IMPORTED_MODULE_3__.WebGLRenderTarget(this.width, this.height, {\n      minFilter: three__WEBPACK_IMPORTED_MODULE_3__.LinearFilter,\n      magFilter: three__WEBPACK_IMPORTED_MODULE_3__.LinearFilter,\n      depthBuffer: false\n    });\n    this.outputTargetInternal = new three__WEBPACK_IMPORTED_MODULE_3__.WebGLRenderTarget(this.width, this.height, {\n      minFilter: three__WEBPACK_IMPORTED_MODULE_3__.LinearFilter,\n      magFilter: three__WEBPACK_IMPORTED_MODULE_3__.LinearFilter,\n      depthBuffer: false\n    });\n    this.bluenoise = //bluenoise;\n    new three__WEBPACK_IMPORTED_MODULE_3__.DataTexture(bluenoiseBits, 128, 128);\n    this.bluenoise.colorSpace = three__WEBPACK_IMPORTED_MODULE_3__.NoColorSpace;\n    this.bluenoise.wrapS = three__WEBPACK_IMPORTED_MODULE_3__.RepeatWrapping;\n    this.bluenoise.wrapT = three__WEBPACK_IMPORTED_MODULE_3__.RepeatWrapping;\n    this.bluenoise.minFilter = three__WEBPACK_IMPORTED_MODULE_3__.NearestFilter;\n    this.bluenoise.magFilter = three__WEBPACK_IMPORTED_MODULE_3__.NearestFilter;\n    this.bluenoise.needsUpdate = true;\n    this.lastTime = 0;\n    this.needsDepthTexture = true;\n    this.needsSwap = true;\n    this._r = new three__WEBPACK_IMPORTED_MODULE_3__.Vector2();\n    this._c = new three__WEBPACK_IMPORTED_MODULE_3__.Color();\n  }\n  configureHalfResTargets() {\n    if (this.configuration.halfRes) {\n      this.depthDownsampleTarget = /*new THREE.WebGLRenderTarget(this.width / 2, this.height / 2, {\n                             minFilter: THREE.NearestFilter,\n                             magFilter: THREE.NearestFilter,\n                             depthBuffer: false,\n                             format: THREE.RedFormat,\n                             type: THREE.FloatType\n                         });*/\n      new three__WEBPACK_IMPORTED_MODULE_3__.WebGLMultipleRenderTargets(this.width / 2, this.height / 2, 2);\n      this.depthDownsampleTarget.texture[0].format = three__WEBPACK_IMPORTED_MODULE_3__.RedFormat;\n      this.depthDownsampleTarget.texture[0].type = three__WEBPACK_IMPORTED_MODULE_3__.FloatType;\n      this.depthDownsampleTarget.texture[0].minFilter = three__WEBPACK_IMPORTED_MODULE_3__.NearestFilter;\n      this.depthDownsampleTarget.texture[0].magFilter = three__WEBPACK_IMPORTED_MODULE_3__.NearestFilter;\n      this.depthDownsampleTarget.texture[0].depthBuffer = false;\n      this.depthDownsampleTarget.texture[1].format = three__WEBPACK_IMPORTED_MODULE_3__.RGBAFormat;\n      this.depthDownsampleTarget.texture[1].type = three__WEBPACK_IMPORTED_MODULE_3__.HalfFloatType;\n      this.depthDownsampleTarget.texture[1].minFilter = three__WEBPACK_IMPORTED_MODULE_3__.NearestFilter;\n      this.depthDownsampleTarget.texture[1].magFilter = three__WEBPACK_IMPORTED_MODULE_3__.NearestFilter;\n      this.depthDownsampleTarget.texture[1].depthBuffer = false;\n      this.depthDownsampleQuad = new _FullScreenTriangle_js__WEBPACK_IMPORTED_MODULE_4__.FullScreenTriangle(new three__WEBPACK_IMPORTED_MODULE_3__.ShaderMaterial(_DepthDownSample_js__WEBPACK_IMPORTED_MODULE_5__.DepthDownSample));\n    } else {\n      if (this.depthDownsampleTarget) {\n        this.depthDownsampleTarget.dispose();\n        this.depthDownsampleTarget = null;\n      }\n      if (this.depthDownsampleQuad) {\n        this.depthDownsampleQuad.dispose();\n        this.depthDownsampleQuad = null;\n      }\n    }\n  }\n  configureSampleDependentPasses() {\n    this.configureAOPass(this.configuration.logarithmicDepthBuffer);\n    this.configureDenoisePass(this.configuration.logarithmicDepthBuffer);\n  }\n  configureAOPass(logarithmicDepthBuffer = false) {\n    this.samples = this.generateHemisphereSamples(this.configuration.aoSamples);\n    this.samplesR = this.generateHemisphereSamplesR(this.configuration.aoSamples);\n    const e = { ..._EffectShader_js__WEBPACK_IMPORTED_MODULE_6__.EffectShader };\n    e.fragmentShader = e.fragmentShader.replace(\"16\", this.configuration.aoSamples).replace(\"16.0\", this.configuration.aoSamples + \".0\");\n    if (logarithmicDepthBuffer) {\n      e.fragmentShader = \"#define LOGDEPTH\\n\" + e.fragmentShader;\n    }\n    if (this.configuration.halfRes) {\n      e.fragmentShader = \"#define HALFRES\\n\" + e.fragmentShader;\n    }\n    if (this.effectShaderQuad) {\n      this.effectShaderQuad.material.dispose();\n      this.effectShaderQuad.material = new three__WEBPACK_IMPORTED_MODULE_3__.ShaderMaterial(e);\n    } else {\n      this.effectShaderQuad = new _FullScreenTriangle_js__WEBPACK_IMPORTED_MODULE_4__.FullScreenTriangle(new three__WEBPACK_IMPORTED_MODULE_3__.ShaderMaterial(e));\n    }\n  }\n  configureDenoisePass(logarithmicDepthBuffer = false) {\n    this.samplesDenoise = this.generateDenoiseSamples(this.configuration.denoiseSamples, 11);\n    const p = { ..._PoissionBlur_js__WEBPACK_IMPORTED_MODULE_7__.PoissionBlur };\n    p.fragmentShader = p.fragmentShader.replace(\"16\", this.configuration.denoiseSamples);\n    if (logarithmicDepthBuffer) {\n      p.fragmentShader = \"#define LOGDEPTH\\n\" + p.fragmentShader;\n    }\n    if (this.poissonBlurQuad) {\n      this.poissonBlurQuad.material.dispose();\n      this.poissonBlurQuad.material = new three__WEBPACK_IMPORTED_MODULE_3__.ShaderMaterial(p);\n    } else {\n      this.poissonBlurQuad = new _FullScreenTriangle_js__WEBPACK_IMPORTED_MODULE_4__.FullScreenTriangle(new three__WEBPACK_IMPORTED_MODULE_3__.ShaderMaterial(p));\n    }\n  }\n  configureEffectCompositer(logarithmicDepthBuffer = false) {\n    const e = { ..._EffectCompositer_js__WEBPACK_IMPORTED_MODULE_8__.EffectCompositer };\n    if (logarithmicDepthBuffer) {\n      e.fragmentShader = \"#define LOGDEPTH\\n\" + e.fragmentShader;\n    }\n    if (this.configuration.halfRes && this.configuration.depthAwareUpsampling) {\n      e.fragmentShader = \"#define HALFRES\\n\" + e.fragmentShader;\n    }\n    if (this.effectCompositerQuad) {\n      this.effectCompositerQuad.material.dispose();\n      this.effectCompositerQuad.material = new three__WEBPACK_IMPORTED_MODULE_3__.ShaderMaterial(e);\n    } else {\n      this.effectCompositerQuad = new _FullScreenTriangle_js__WEBPACK_IMPORTED_MODULE_4__.FullScreenTriangle(new three__WEBPACK_IMPORTED_MODULE_3__.ShaderMaterial(e));\n    }\n  }\n  /**\n   *\n   * @param {Number} n\n   * @returns {THREE.Vector3[]}\n   */\n  generateHemisphereSamples(n) {\n    const points = [];\n    for (let k = 0; k < n; k++) {\n      const theta = 2.399963 * k;\n      const r = Math.sqrt(k + 0.5) / Math.sqrt(n);\n      const x = r * Math.cos(theta);\n      const y = r * Math.sin(theta);\n      const z = Math.sqrt(1 - (x * x + y * y));\n      points.push(new three__WEBPACK_IMPORTED_MODULE_3__.Vector3(x, y, z));\n    }\n    return points;\n  }\n  /**\n   *\n   * @param {number} n\n   * @returns {number[]}\n   */\n  generateHemisphereSamplesR(n) {\n    let samplesR = [];\n    for (let i = 0; i < n; i++) {\n      samplesR.push((i + 1) / n);\n    }\n    return samplesR;\n  }\n  /**\n   *\n   * @param {number} numSamples\n   * @param {number} numRings\n   * @returns {THREE.Vector2[]}\n   */\n  generateDenoiseSamples(numSamples, numRings) {\n    const angleStep = 2 * Math.PI * numRings / numSamples;\n    const invNumSamples = 1 / numSamples;\n    const radiusStep = invNumSamples;\n    const samples = [];\n    let radius = invNumSamples;\n    let angle = 0;\n    for (let i = 0; i < numSamples; i++) {\n      samples.push(new three__WEBPACK_IMPORTED_MODULE_3__.Vector2(Math.cos(angle), Math.sin(angle)).multiplyScalar(Math.pow(radius, 0.75)));\n      radius += radiusStep;\n      angle += angleStep;\n    }\n    return samples;\n  }\n  setSize(width, height) {\n    this.width = width;\n    this.height = height;\n    const c = this.configuration.halfRes ? 0.5 : 1;\n    this.writeTargetInternal.setSize(width * c, height * c);\n    this.readTargetInternal.setSize(width * c, height * c);\n    if (this.configuration.halfRes) {\n      this.depthDownsampleTarget.setSize(width * c, height * c);\n    }\n    this.outputTargetInternal.setSize(width, height);\n  }\n  setDepthTexture(depthTexture) {\n    this.depthTexture = depthTexture;\n  }\n  render(renderer, inputBuffer, outputBuffer) {\n    const xrEnabled = renderer.xr.enabled;\n    renderer.xr.enabled = false;\n    if (renderer.capabilities.logarithmicDepthBuffer !== this.configuration.logarithmicDepthBuffer) {\n      this.configuration.logarithmicDepthBuffer = renderer.capabilities.logarithmicDepthBuffer;\n      this.configureAOPass(this.configuration.logarithmicDepthBuffer);\n      this.configureDenoisePass(this.configuration.logarithmicDepthBuffer);\n      this.configureEffectCompositer(this.configuration.logarithmicDepthBuffer);\n    }\n    if (inputBuffer.texture.type !== this.outputTargetInternal.texture.type) {\n      this.outputTargetInternal.texture.type = inputBuffer.texture.type;\n      this.outputTargetInternal.texture.needsUpdate = true;\n    }\n    let gl;\n    let ext;\n    let timerQuery;\n    if (this.debugMode) {\n      gl = renderer.getContext();\n      ext = gl.getExtension(\"EXT_disjoint_timer_query_webgl2\");\n      if (ext === null) {\n        console.error(\"EXT_disjoint_timer_query_webgl2 not available, disabling debug mode.\");\n        this.debugMode = false;\n      }\n    }\n    if (this.debugMode) {\n      timerQuery = gl.createQuery();\n      gl.beginQuery(ext.TIME_ELAPSED_EXT, timerQuery);\n    }\n    this.camera.updateMatrixWorld();\n    this._r.set(this.width, this.height);\n    let trueRadius = this.configuration.aoRadius;\n    if (this.configuration.halfRes && this.configuration.screenSpaceRadius) {\n      trueRadius *= 0.5;\n    }\n    if (this.configuration.halfRes) {\n      renderer.setRenderTarget(this.depthDownsampleTarget);\n      this.depthDownsampleQuad.material.uniforms.sceneDepth.value = this.depthTexture;\n      this.depthDownsampleQuad.material.uniforms.resolution.value = this._r;\n      this.depthDownsampleQuad.material.uniforms[\"near\"].value = this.camera.near;\n      this.depthDownsampleQuad.material.uniforms[\"far\"].value = this.camera.far;\n      this.depthDownsampleQuad.material.uniforms[\"projectionMatrixInv\"].value = this.camera.projectionMatrixInverse;\n      this.depthDownsampleQuad.material.uniforms[\"viewMatrixInv\"].value = this.camera.matrixWorld;\n      this.depthDownsampleQuad.material.uniforms[\"logDepth\"].value = this.configuration.logarithmicDepthBuffer;\n      this.depthDownsampleQuad.render(renderer);\n    }\n    this.effectShaderQuad.material.uniforms[\"sceneDiffuse\"].value = inputBuffer.texture;\n    this.effectShaderQuad.material.uniforms[\"sceneDepth\"].value = this.configuration.halfRes ? this.depthDownsampleTarget.texture[0] : this.depthTexture;\n    this.effectShaderQuad.material.uniforms[\"sceneNormal\"].value = this.configuration.halfRes ? this.depthDownsampleTarget.texture[1] : null;\n    this.effectShaderQuad.material.uniforms[\"projMat\"].value = this.camera.projectionMatrix;\n    this.effectShaderQuad.material.uniforms[\"viewMat\"].value = this.camera.matrixWorldInverse;\n    this.effectShaderQuad.material.uniforms[\"projViewMat\"].value = this.camera.projectionMatrix.clone().multiply(this.camera.matrixWorldInverse.clone());\n    this.effectShaderQuad.material.uniforms[\"projectionMatrixInv\"].value = this.camera.projectionMatrixInverse;\n    this.effectShaderQuad.material.uniforms[\"viewMatrixInv\"].value = this.camera.matrixWorld;\n    this.effectShaderQuad.material.uniforms[\"cameraPos\"].value = this.camera.getWorldPosition(new three__WEBPACK_IMPORTED_MODULE_3__.Vector3());\n    this.effectShaderQuad.material.uniforms[\"resolution\"].value = this.configuration.halfRes ? this._r.clone().multiplyScalar(1 / 2).floor() : this._r;\n    this.effectShaderQuad.material.uniforms[\"time\"].value = performance.now() / 1e3;\n    this.effectShaderQuad.material.uniforms[\"samples\"].value = this.samples;\n    this.effectShaderQuad.material.uniforms[\"samplesR\"].value = this.samplesR;\n    this.effectShaderQuad.material.uniforms[\"bluenoise\"].value = this.bluenoise;\n    this.effectShaderQuad.material.uniforms[\"radius\"].value = trueRadius;\n    this.effectShaderQuad.material.uniforms[\"distanceFalloff\"].value = this.configuration.distanceFalloff;\n    this.effectShaderQuad.material.uniforms[\"near\"].value = this.camera.near;\n    this.effectShaderQuad.material.uniforms[\"far\"].value = this.camera.far;\n    this.effectShaderQuad.material.uniforms[\"logDepth\"].value = renderer.capabilities.logarithmicDepthBuffer;\n    this.effectShaderQuad.material.uniforms[\"ortho\"].value = this.camera.isOrthographicCamera;\n    this.effectShaderQuad.material.uniforms[\"screenSpaceRadius\"].value = this.configuration.screenSpaceRadius;\n    renderer.setRenderTarget(this.writeTargetInternal);\n    this.effectShaderQuad.render(renderer);\n    for (let i = 0; i < this.configuration.denoiseIterations; i++) {\n      [this.writeTargetInternal, this.readTargetInternal] = [this.readTargetInternal, this.writeTargetInternal];\n      this.poissonBlurQuad.material.uniforms[\"tDiffuse\"].value = this.readTargetInternal.texture;\n      this.poissonBlurQuad.material.uniforms[\"sceneDepth\"].value = this.configuration.halfRes ? this.depthDownsampleTarget.texture[0] : this.depthTexture;\n      this.poissonBlurQuad.material.uniforms[\"projMat\"].value = this.camera.projectionMatrix;\n      this.poissonBlurQuad.material.uniforms[\"viewMat\"].value = this.camera.matrixWorldInverse;\n      this.poissonBlurQuad.material.uniforms[\"projectionMatrixInv\"].value = this.camera.projectionMatrixInverse;\n      this.poissonBlurQuad.material.uniforms[\"viewMatrixInv\"].value = this.camera.matrixWorld;\n      this.poissonBlurQuad.material.uniforms[\"cameraPos\"].value = this.camera.getWorldPosition(new three__WEBPACK_IMPORTED_MODULE_3__.Vector3());\n      this.poissonBlurQuad.material.uniforms[\"resolution\"].value = this.configuration.halfRes ? this._r.clone().multiplyScalar(1 / 2).floor() : this._r;\n      this.poissonBlurQuad.material.uniforms[\"time\"].value = performance.now() / 1e3;\n      this.poissonBlurQuad.material.uniforms[\"blueNoise\"].value = this.bluenoise;\n      this.poissonBlurQuad.material.uniforms[\"radius\"].value = this.configuration.denoiseRadius * (this.configuration.halfRes ? 1 / 2 : 1);\n      this.poissonBlurQuad.material.uniforms[\"worldRadius\"].value = trueRadius;\n      this.poissonBlurQuad.material.uniforms[\"distanceFalloff\"].value = this.configuration.distanceFalloff;\n      this.poissonBlurQuad.material.uniforms[\"index\"].value = i;\n      this.poissonBlurQuad.material.uniforms[\"poissonDisk\"].value = this.samplesDenoise;\n      this.poissonBlurQuad.material.uniforms[\"near\"].value = this.camera.near;\n      this.poissonBlurQuad.material.uniforms[\"far\"].value = this.camera.far;\n      this.poissonBlurQuad.material.uniforms[\"logDepth\"].value = renderer.capabilities.logarithmicDepthBuffer;\n      this.poissonBlurQuad.material.uniforms[\"screenSpaceRadius\"].value = this.configuration.screenSpaceRadius;\n      renderer.setRenderTarget(this.writeTargetInternal);\n      this.poissonBlurQuad.render(renderer);\n    }\n    this.effectCompositerQuad.material.uniforms[\"sceneDiffuse\"].value = inputBuffer.texture;\n    this.effectCompositerQuad.material.uniforms[\"sceneDepth\"].value = this.depthTexture;\n    this.effectCompositerQuad.material.uniforms[\"near\"].value = this.camera.near;\n    this.effectCompositerQuad.material.uniforms[\"far\"].value = this.camera.far;\n    this.effectCompositerQuad.material.uniforms[\"projectionMatrixInv\"].value = this.camera.projectionMatrixInverse;\n    this.effectCompositerQuad.material.uniforms[\"viewMatrixInv\"].value = this.camera.matrixWorld;\n    this.effectCompositerQuad.material.uniforms[\"logDepth\"].value = renderer.capabilities.logarithmicDepthBuffer;\n    this.effectCompositerQuad.material.uniforms[\"ortho\"].value = this.camera.isOrthographicCamera;\n    this.effectCompositerQuad.material.uniforms[\"downsampledDepth\"].value = this.configuration.halfRes ? this.depthDownsampleTarget.texture[0] : this.depthTexture;\n    this.effectCompositerQuad.material.uniforms[\"resolution\"].value = this._r;\n    this.effectCompositerQuad.material.uniforms[\"blueNoise\"].value = this.bluenoise;\n    this.effectCompositerQuad.material.uniforms[\"intensity\"].value = this.configuration.intensity;\n    this.effectCompositerQuad.material.uniforms[\"renderMode\"].value = this.configuration.renderMode;\n    this.effectCompositerQuad.material.uniforms[\"screenSpaceRadius\"].value = this.configuration.screenSpaceRadius;\n    this.effectCompositerQuad.material.uniforms[\"radius\"].value = trueRadius;\n    this.effectCompositerQuad.material.uniforms[\"distanceFalloff\"].value = this.configuration.distanceFalloff;\n    this.effectCompositerQuad.material.uniforms[\"gammaCorrection\"].value = this.autosetGamma ? this.renderToScreen : this.configuration.gammaCorrection;\n    this.effectCompositerQuad.material.uniforms[\"tDiffuse\"].value = this.writeTargetInternal.texture;\n    this.effectCompositerQuad.material.uniforms[\"color\"].value = this._c.copy(this.configuration.color).convertSRGBToLinear();\n    this.effectCompositerQuad.material.uniforms[\"colorMultiply\"].value = this.configuration.colorMultiply;\n    this.effectCompositerQuad.material.uniforms[\"cameraPos\"].value = this.camera.getWorldPosition(new three__WEBPACK_IMPORTED_MODULE_3__.Vector3());\n    this.effectCompositerQuad.material.uniforms[\"fog\"].value = !!this.scene.fog;\n    if (this.scene.fog) {\n      if (this.scene.fog.isFog) {\n        this.effectCompositerQuad.material.uniforms[\"fogExp\"].value = false;\n        this.effectCompositerQuad.material.uniforms[\"fogNear\"].value = this.scene.fog.near;\n        this.effectCompositerQuad.material.uniforms[\"fogFar\"].value = this.scene.fog.far;\n      } else if (this.scene.fog.isFogExp2) {\n        this.effectCompositerQuad.material.uniforms[\"fogExp\"].value = true;\n        this.effectCompositerQuad.material.uniforms[\"fogDensity\"].value = this.scene.fog.density;\n      } else {\n        console.error(`Unsupported fog type ${this.scene.fog.constructor.name} in SSAOPass.`);\n      }\n    }\n    renderer.setRenderTarget(\n      /* this.renderToScreen ? null :\n                 outputBuffer*/\n      this.outputTargetInternal\n    );\n    this.effectCompositerQuad.render(renderer);\n    renderer.setRenderTarget(this.renderToScreen ? null : outputBuffer);\n    this.copyQuad.material.uniforms[\"tDiffuse\"].value = this.outputTargetInternal.texture;\n    this.copyQuad.render(renderer);\n    if (this.debugMode) {\n      gl.endQuery(ext.TIME_ELAPSED_EXT);\n      checkTimerQuery(timerQuery, gl, this);\n    }\n    renderer.xr.enabled = xrEnabled;\n  }\n  /**\n   * Enables the debug mode of the AO, meaning the lastTime value will be updated.\n   */\n  enableDebugMode() {\n    this.debugMode = true;\n  }\n  /**\n   * Disables the debug mode of the AO, meaning the lastTime value will not be updated.\n   */\n  disableDebugMode() {\n    this.debugMode = false;\n  }\n  /**\n   * Sets the display mode of the AO\n   * @param {\"Combined\" | \"AO\" | \"No AO\" | \"Split\" | \"Split AO\"} mode - The display mode.\n   */\n  setDisplayMode(mode) {\n    this.configuration.renderMode = [\"Combined\", \"AO\", \"No AO\", \"Split\", \"Split AO\"].indexOf(mode);\n  }\n  /**\n   *\n   * @param {\"Performance\" | \"Low\" | \"Medium\" | \"High\" | \"Ultra\"} mode\n   */\n  setQualityMode(mode) {\n    if (mode === \"Performance\") {\n      this.configuration.aoSamples = 8;\n      this.configuration.denoiseSamples = 4;\n      this.configuration.denoiseRadius = 12;\n    } else if (mode === \"Low\") {\n      this.configuration.aoSamples = 16;\n      this.configuration.denoiseSamples = 4;\n      this.configuration.denoiseRadius = 12;\n    } else if (mode === \"Medium\") {\n      this.configuration.aoSamples = 16;\n      this.configuration.denoiseSamples = 8;\n      this.configuration.denoiseRadius = 12;\n    } else if (mode === \"High\") {\n      this.configuration.aoSamples = 64;\n      this.configuration.denoiseSamples = 8;\n      this.configuration.denoiseRadius = 6;\n    } else if (mode === \"Ultra\") {\n      this.configuration.aoSamples = 64;\n      this.configuration.denoiseSamples = 16;\n      this.configuration.denoiseRadius = 6;\n    }\n  }\n}\n\n//# sourceMappingURL=N8AOPostPass.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1jbGllbnQpLy4vbm9kZV9tb2R1bGVzL0ByZWFjdC10aHJlZS9wb3N0cHJvY2Vzc2luZy9kaXN0L2VmZmVjdHMvTjhBTy9OOEFPUG9zdFBhc3MuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7OztBQUErQjtBQUNPO0FBQ047QUFDNkI7QUFDWjtBQUNRO0FBQ1I7QUFDTTtBQUNoQjtBQUN2QyxzQkFBc0IsMENBQU0sTUFBTSxxREFBUztBQUMzQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsMkJBQTJCLGdEQUFJO0FBQy9CO0FBQ0E7QUFDQSxhQUFhLGFBQWE7QUFDMUIsYUFBYSxjQUFjO0FBQzNCLGFBQWEsUUFBUTtBQUNyQixhQUFhLFFBQVE7QUFDckI7QUFDQSxnQkFBZ0IsYUFBYTtBQUM3QixnQkFBZ0IsY0FBYztBQUM5QixnQkFBZ0IsUUFBUTtBQUN4QixnQkFBZ0IsUUFBUTtBQUN4QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQix3Q0FBVztBQUM5QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QixzRUFBa0I7QUFDMUMsVUFBVSxpREFBb0I7QUFDOUI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0EsbUNBQW1DLG9EQUF1QjtBQUMxRCxpQkFBaUIsK0NBQWtCO0FBQ25DLGlCQUFpQiwrQ0FBa0I7QUFDbkM7QUFDQSxLQUFLO0FBQ0wsa0NBQWtDLG9EQUF1QjtBQUN6RCxpQkFBaUIsK0NBQWtCO0FBQ25DLGlCQUFpQiwrQ0FBa0I7QUFDbkM7QUFDQSxLQUFLO0FBQ0wsb0NBQW9DLG9EQUF1QjtBQUMzRCxpQkFBaUIsK0NBQWtCO0FBQ25DLGlCQUFpQiwrQ0FBa0I7QUFDbkM7QUFDQSxLQUFLO0FBQ0w7QUFDQSxRQUFRLDhDQUFpQjtBQUN6QixnQ0FBZ0MsK0NBQWtCO0FBQ2xELDJCQUEyQixpREFBb0I7QUFDL0MsMkJBQTJCLGlEQUFvQjtBQUMvQywrQkFBK0IsZ0RBQW1CO0FBQ2xELCtCQUErQixnREFBbUI7QUFDbEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0IsMENBQWE7QUFDL0Isa0JBQWtCLHdDQUFXO0FBQzdCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBCQUEwQixFQUFFO0FBQzVCLFVBQVUsNkRBQWdDO0FBQzFDLHFEQUFxRCw0Q0FBZTtBQUNwRSxtREFBbUQsNENBQWU7QUFDbEUsd0RBQXdELGdEQUFtQjtBQUMzRSx3REFBd0QsZ0RBQW1CO0FBQzNFO0FBQ0EscURBQXFELDZDQUFnQjtBQUNyRSxtREFBbUQsZ0RBQW1CO0FBQ3RFLHdEQUF3RCxnREFBbUI7QUFDM0Usd0RBQXdELGdEQUFtQjtBQUMzRTtBQUNBLHFDQUFxQyxzRUFBa0IsS0FBSyxpREFBb0IsQ0FBQyxnRUFBZTtBQUNoRyxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQixHQUFHLDBEQUFZO0FBQy9CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJDQUEyQyxpREFBb0I7QUFDL0QsTUFBTTtBQUNOLGtDQUFrQyxzRUFBa0IsS0FBSyxpREFBb0I7QUFDN0U7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0IsR0FBRywwREFBWTtBQUMvQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQ0FBMEMsaURBQW9CO0FBQzlELE1BQU07QUFDTixpQ0FBaUMsc0VBQWtCLEtBQUssaURBQW9CO0FBQzVFO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQixHQUFHLGtFQUFnQjtBQUNuQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0NBQStDLGlEQUFvQjtBQUNuRSxNQUFNO0FBQ04sc0NBQXNDLHNFQUFrQixLQUFLLGlEQUFvQjtBQUNqRjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsUUFBUTtBQUNyQixlQUFlO0FBQ2Y7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLE9BQU87QUFDM0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQiwwQ0FBYTtBQUNuQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYSxRQUFRO0FBQ3JCLGVBQWU7QUFDZjtBQUNBO0FBQ0E7QUFDQSxvQkFBb0IsT0FBTztBQUMzQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLFFBQVE7QUFDckIsYUFBYSxRQUFRO0FBQ3JCLGVBQWU7QUFDZjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLGdCQUFnQjtBQUNwQyx1QkFBdUIsMENBQWE7QUFDcEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0dBQWtHLDBDQUFhO0FBQy9HO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0IsMENBQTBDO0FBQzlEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUdBQW1HLDBDQUFhO0FBQ2hIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzR0FBc0csMENBQWE7QUFDbkg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQSxRQUFRO0FBQ1IsOENBQThDLGlDQUFpQztBQUMvRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsb0RBQW9EO0FBQ2pFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWEscURBQXFEO0FBQ2xFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFHRTtBQUNGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9AcmVhY3QtdGhyZWUvcG9zdHByb2Nlc3NpbmcvZGlzdC9lZmZlY3RzL044QU8vTjhBT1Bvc3RQYXNzLmpzPzcwMDUiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgVEhSRUUgZnJvbSBcInRocmVlXCI7XG5pbXBvcnQgeyBQYXNzIH0gZnJvbSBcInBvc3Rwcm9jZXNzaW5nXCI7XG5pbXBvcnQgeyBCdWZmZXIgfSBmcm9tIFwiYnVmZmVyXCI7XG5pbXBvcnQgeyBGdWxsU2NyZWVuVHJpYW5nbGUgfSBmcm9tIFwiLi9GdWxsU2NyZWVuVHJpYW5nbGUuanNcIjtcbmltcG9ydCB7IEVmZmVjdFNoYWRlciB9IGZyb20gXCIuL0VmZmVjdFNoYWRlci5qc1wiO1xuaW1wb3J0IHsgRWZmZWN0Q29tcG9zaXRlciB9IGZyb20gXCIuL0VmZmVjdENvbXBvc2l0ZXIuanNcIjtcbmltcG9ydCB7IFBvaXNzaW9uQmx1ciB9IGZyb20gXCIuL1BvaXNzaW9uQmx1ci5qc1wiO1xuaW1wb3J0IHsgRGVwdGhEb3duU2FtcGxlIH0gZnJvbSBcIi4vRGVwdGhEb3duU2FtcGxlLmpzXCI7XG5pbXBvcnQgQmx1ZU5vaXNlIGZyb20gXCIuL0JsdWVOb2lzZS5qc1wiO1xuY29uc3QgYmx1ZW5vaXNlQml0cyA9IEJ1ZmZlci5mcm9tKEJsdWVOb2lzZSwgXCJiYXNlNjRcIik7XG5mdW5jdGlvbiBjaGVja1RpbWVyUXVlcnkodGltZXJRdWVyeSwgZ2wsIHBhc3MpIHtcbiAgY29uc3QgYXZhaWxhYmxlID0gZ2wuZ2V0UXVlcnlQYXJhbWV0ZXIodGltZXJRdWVyeSwgZ2wuUVVFUllfUkVTVUxUX0FWQUlMQUJMRSk7XG4gIGlmIChhdmFpbGFibGUpIHtcbiAgICBjb25zdCBlbGFwc2VkVGltZUluTnMgPSBnbC5nZXRRdWVyeVBhcmFtZXRlcih0aW1lclF1ZXJ5LCBnbC5RVUVSWV9SRVNVTFQpO1xuICAgIGNvbnN0IGVsYXBzZWRUaW1lSW5NcyA9IGVsYXBzZWRUaW1lSW5OcyAvIDFlNjtcbiAgICBwYXNzLmxhc3RUaW1lID0gZWxhcHNlZFRpbWVJbk1zO1xuICB9IGVsc2Uge1xuICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgY2hlY2tUaW1lclF1ZXJ5KHRpbWVyUXVlcnksIGdsLCBwYXNzKTtcbiAgICB9LCAxKTtcbiAgfVxufVxuY2xhc3MgTjhBT1Bvc3RQYXNzIGV4dGVuZHMgUGFzcyB7XG4gIC8qKlxuICAgKlxuICAgKiBAcGFyYW0ge1RIUkVFLlNjZW5lfSBzY2VuZVxuICAgKiBAcGFyYW0ge1RIUkVFLkNhbWVyYX0gY2FtZXJhXG4gICAqIEBwYXJhbSB7bnVtYmVyfSB3aWR0aFxuICAgKiBAcGFyYW0ge251bWJlcn0gaGVpZ2h0XG4gICAqXG4gICAqIEBwcm9wZXJ0eSB7VEhSRUUuU2NlbmV9IHNjZW5lXG4gICAqIEBwcm9wZXJ0eSB7VEhSRUUuQ2FtZXJhfSBjYW1lcmFcbiAgICogQHByb3BlcnR5IHtudW1iZXJ9IHdpZHRoXG4gICAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBoZWlnaHRcbiAgICovXG4gIGNvbnN0cnVjdG9yKHNjZW5lLCBjYW1lcmEsIHdpZHRoID0gNTEyLCBoZWlnaHQgPSA1MTIpIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMud2lkdGggPSB3aWR0aDtcbiAgICB0aGlzLmhlaWdodCA9IGhlaWdodDtcbiAgICB0aGlzLmNsZWFyID0gdHJ1ZTtcbiAgICB0aGlzLmNhbWVyYSA9IGNhbWVyYTtcbiAgICB0aGlzLnNjZW5lID0gc2NlbmU7XG4gICAgdGhpcy5hdXRvc2V0R2FtbWEgPSB0cnVlO1xuICAgIHRoaXMuY29uZmlndXJhdGlvbiA9IG5ldyBQcm94eShcbiAgICAgIHtcbiAgICAgICAgYW9TYW1wbGVzOiAxNixcbiAgICAgICAgYW9SYWRpdXM6IDUsXG4gICAgICAgIGRlbm9pc2VTYW1wbGVzOiA4LFxuICAgICAgICBkZW5vaXNlUmFkaXVzOiAxMixcbiAgICAgICAgZGlzdGFuY2VGYWxsb2ZmOiAxLFxuICAgICAgICBpbnRlbnNpdHk6IDUsXG4gICAgICAgIGRlbm9pc2VJdGVyYXRpb25zOiAyLFxuICAgICAgICByZW5kZXJNb2RlOiAwLFxuICAgICAgICBjb2xvcjogbmV3IFRIUkVFLkNvbG9yKDAsIDAsIDApLFxuICAgICAgICBnYW1tYUNvcnJlY3Rpb246IHRydWUsXG4gICAgICAgIGxvZ2FyaXRobWljRGVwdGhCdWZmZXI6IGZhbHNlLFxuICAgICAgICBzY3JlZW5TcGFjZVJhZGl1czogZmFsc2UsXG4gICAgICAgIGhhbGZSZXM6IGZhbHNlLFxuICAgICAgICBkZXB0aEF3YXJlVXBzYW1wbGluZzogdHJ1ZSxcbiAgICAgICAgY29sb3JNdWx0aXBseTogdHJ1ZVxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgc2V0OiAodGFyZ2V0LCBwcm9wTmFtZSwgdmFsdWUpID0+IHtcbiAgICAgICAgICBjb25zdCBvbGRQcm9wID0gdGFyZ2V0W3Byb3BOYW1lXTtcbiAgICAgICAgICB0YXJnZXRbcHJvcE5hbWVdID0gdmFsdWU7XG4gICAgICAgICAgaWYgKHByb3BOYW1lID09PSBcImFvU2FtcGxlc1wiICYmIG9sZFByb3AgIT09IHZhbHVlKSB7XG4gICAgICAgICAgICB0aGlzLmNvbmZpZ3VyZUFPUGFzcyh0aGlzLmNvbmZpZ3VyYXRpb24ubG9nYXJpdGhtaWNEZXB0aEJ1ZmZlcik7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChwcm9wTmFtZSA9PT0gXCJkZW5vaXNlU2FtcGxlc1wiICYmIG9sZFByb3AgIT09IHZhbHVlKSB7XG4gICAgICAgICAgICB0aGlzLmNvbmZpZ3VyZURlbm9pc2VQYXNzKHRoaXMuY29uZmlndXJhdGlvbi5sb2dhcml0aG1pY0RlcHRoQnVmZmVyKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHByb3BOYW1lID09PSBcImhhbGZSZXNcIiAmJiBvbGRQcm9wICE9PSB2YWx1ZSkge1xuICAgICAgICAgICAgdGhpcy5jb25maWd1cmVBT1Bhc3ModGhpcy5jb25maWd1cmF0aW9uLmxvZ2FyaXRobWljRGVwdGhCdWZmZXIpO1xuICAgICAgICAgICAgdGhpcy5jb25maWd1cmVIYWxmUmVzVGFyZ2V0cygpO1xuICAgICAgICAgICAgdGhpcy5jb25maWd1cmVFZmZlY3RDb21wb3NpdGVyKHRoaXMuY29uZmlndXJhdGlvbi5sb2dhcml0aG1pY0RlcHRoQnVmZmVyKTtcbiAgICAgICAgICAgIHRoaXMuc2V0U2l6ZSh0aGlzLndpZHRoLCB0aGlzLmhlaWdodCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChwcm9wTmFtZSA9PT0gXCJkZXB0aEF3YXJlVXBzYW1wbGluZ1wiICYmIG9sZFByb3AgIT09IHZhbHVlKSB7XG4gICAgICAgICAgICB0aGlzLmNvbmZpZ3VyZUVmZmVjdENvbXBvc2l0ZXIodGhpcy5jb25maWd1cmF0aW9uLmxvZ2FyaXRobWljRGVwdGhCdWZmZXIpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAocHJvcE5hbWUgPT09IFwiZ2FtbWFDb3JyZWN0aW9uXCIpIHtcbiAgICAgICAgICAgIHRoaXMuYXV0b3NldEdhbW1hID0gZmFsc2U7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgKTtcbiAgICB0aGlzLnNhbXBsZXMgPSBbXTtcbiAgICB0aGlzLnNhbXBsZXNSID0gW107XG4gICAgdGhpcy5zYW1wbGVzRGVub2lzZSA9IFtdO1xuICAgIHRoaXMuY29uZmlndXJlRWZmZWN0Q29tcG9zaXRlcih0aGlzLmNvbmZpZ3VyYXRpb24ubG9nYXJpdGhtaWNEZXB0aEJ1ZmZlcik7XG4gICAgdGhpcy5jb25maWd1cmVTYW1wbGVEZXBlbmRlbnRQYXNzZXMoKTtcbiAgICB0aGlzLmNvbmZpZ3VyZUhhbGZSZXNUYXJnZXRzKCk7XG4gICAgdGhpcy5jb3B5UXVhZCA9IG5ldyBGdWxsU2NyZWVuVHJpYW5nbGUoXG4gICAgICBuZXcgVEhSRUUuU2hhZGVyTWF0ZXJpYWwoe1xuICAgICAgICB1bmlmb3Jtczoge1xuICAgICAgICAgIHREaWZmdXNlOiB7XG4gICAgICAgICAgICB2YWx1ZTogbnVsbFxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgZGVwdGhXcml0ZTogZmFsc2UsXG4gICAgICAgIHZlcnRleFNoYWRlcjogYFxuICAgICAgICAgICAgdmFyeWluZyB2ZWMyIHZVdjtcbiAgICAgICAgICAgIHZvaWQgbWFpbigpIHtcbiAgICAgICAgICAgICAgICB2VXYgPSB1djtcbiAgICAgICAgICAgICAgICBnbF9Qb3NpdGlvbiA9IHZlYzQocG9zaXRpb24sIDEpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYCxcbiAgICAgICAgZnJhZ21lbnRTaGFkZXI6IGBcbiAgICAgICAgICAgIHVuaWZvcm0gc2FtcGxlcjJEIHREaWZmdXNlO1xuICAgICAgICAgICAgdmFyeWluZyB2ZWMyIHZVdjtcbiAgICAgICAgICAgIHZvaWQgbWFpbigpIHtcbiAgICAgICAgICAgICAgICBnbF9GcmFnQ29sb3IgPSB0ZXh0dXJlMkQodERpZmZ1c2UsIHZVdik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBgXG4gICAgICB9KVxuICAgICk7XG4gICAgdGhpcy53cml0ZVRhcmdldEludGVybmFsID0gbmV3IFRIUkVFLldlYkdMUmVuZGVyVGFyZ2V0KHRoaXMud2lkdGgsIHRoaXMuaGVpZ2h0LCB7XG4gICAgICBtaW5GaWx0ZXI6IFRIUkVFLkxpbmVhckZpbHRlcixcbiAgICAgIG1hZ0ZpbHRlcjogVEhSRUUuTGluZWFyRmlsdGVyLFxuICAgICAgZGVwdGhCdWZmZXI6IGZhbHNlXG4gICAgfSk7XG4gICAgdGhpcy5yZWFkVGFyZ2V0SW50ZXJuYWwgPSBuZXcgVEhSRUUuV2ViR0xSZW5kZXJUYXJnZXQodGhpcy53aWR0aCwgdGhpcy5oZWlnaHQsIHtcbiAgICAgIG1pbkZpbHRlcjogVEhSRUUuTGluZWFyRmlsdGVyLFxuICAgICAgbWFnRmlsdGVyOiBUSFJFRS5MaW5lYXJGaWx0ZXIsXG4gICAgICBkZXB0aEJ1ZmZlcjogZmFsc2VcbiAgICB9KTtcbiAgICB0aGlzLm91dHB1dFRhcmdldEludGVybmFsID0gbmV3IFRIUkVFLldlYkdMUmVuZGVyVGFyZ2V0KHRoaXMud2lkdGgsIHRoaXMuaGVpZ2h0LCB7XG4gICAgICBtaW5GaWx0ZXI6IFRIUkVFLkxpbmVhckZpbHRlcixcbiAgICAgIG1hZ0ZpbHRlcjogVEhSRUUuTGluZWFyRmlsdGVyLFxuICAgICAgZGVwdGhCdWZmZXI6IGZhbHNlXG4gICAgfSk7XG4gICAgdGhpcy5ibHVlbm9pc2UgPSAvL2JsdWVub2lzZTtcbiAgICBuZXcgVEhSRUUuRGF0YVRleHR1cmUoYmx1ZW5vaXNlQml0cywgMTI4LCAxMjgpO1xuICAgIHRoaXMuYmx1ZW5vaXNlLmNvbG9yU3BhY2UgPSBUSFJFRS5Ob0NvbG9yU3BhY2U7XG4gICAgdGhpcy5ibHVlbm9pc2Uud3JhcFMgPSBUSFJFRS5SZXBlYXRXcmFwcGluZztcbiAgICB0aGlzLmJsdWVub2lzZS53cmFwVCA9IFRIUkVFLlJlcGVhdFdyYXBwaW5nO1xuICAgIHRoaXMuYmx1ZW5vaXNlLm1pbkZpbHRlciA9IFRIUkVFLk5lYXJlc3RGaWx0ZXI7XG4gICAgdGhpcy5ibHVlbm9pc2UubWFnRmlsdGVyID0gVEhSRUUuTmVhcmVzdEZpbHRlcjtcbiAgICB0aGlzLmJsdWVub2lzZS5uZWVkc1VwZGF0ZSA9IHRydWU7XG4gICAgdGhpcy5sYXN0VGltZSA9IDA7XG4gICAgdGhpcy5uZWVkc0RlcHRoVGV4dHVyZSA9IHRydWU7XG4gICAgdGhpcy5uZWVkc1N3YXAgPSB0cnVlO1xuICAgIHRoaXMuX3IgPSBuZXcgVEhSRUUuVmVjdG9yMigpO1xuICAgIHRoaXMuX2MgPSBuZXcgVEhSRUUuQ29sb3IoKTtcbiAgfVxuICBjb25maWd1cmVIYWxmUmVzVGFyZ2V0cygpIHtcbiAgICBpZiAodGhpcy5jb25maWd1cmF0aW9uLmhhbGZSZXMpIHtcbiAgICAgIHRoaXMuZGVwdGhEb3duc2FtcGxlVGFyZ2V0ID0gLypuZXcgVEhSRUUuV2ViR0xSZW5kZXJUYXJnZXQodGhpcy53aWR0aCAvIDIsIHRoaXMuaGVpZ2h0IC8gMiwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtaW5GaWx0ZXI6IFRIUkVFLk5lYXJlc3RGaWx0ZXIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hZ0ZpbHRlcjogVEhSRUUuTmVhcmVzdEZpbHRlcixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVwdGhCdWZmZXI6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3JtYXQ6IFRIUkVFLlJlZEZvcm1hdCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogVEhSRUUuRmxvYXRUeXBlXG4gICAgICAgICAgICAgICAgICAgICAgICAgfSk7Ki9cbiAgICAgIG5ldyBUSFJFRS5XZWJHTE11bHRpcGxlUmVuZGVyVGFyZ2V0cyh0aGlzLndpZHRoIC8gMiwgdGhpcy5oZWlnaHQgLyAyLCAyKTtcbiAgICAgIHRoaXMuZGVwdGhEb3duc2FtcGxlVGFyZ2V0LnRleHR1cmVbMF0uZm9ybWF0ID0gVEhSRUUuUmVkRm9ybWF0O1xuICAgICAgdGhpcy5kZXB0aERvd25zYW1wbGVUYXJnZXQudGV4dHVyZVswXS50eXBlID0gVEhSRUUuRmxvYXRUeXBlO1xuICAgICAgdGhpcy5kZXB0aERvd25zYW1wbGVUYXJnZXQudGV4dHVyZVswXS5taW5GaWx0ZXIgPSBUSFJFRS5OZWFyZXN0RmlsdGVyO1xuICAgICAgdGhpcy5kZXB0aERvd25zYW1wbGVUYXJnZXQudGV4dHVyZVswXS5tYWdGaWx0ZXIgPSBUSFJFRS5OZWFyZXN0RmlsdGVyO1xuICAgICAgdGhpcy5kZXB0aERvd25zYW1wbGVUYXJnZXQudGV4dHVyZVswXS5kZXB0aEJ1ZmZlciA9IGZhbHNlO1xuICAgICAgdGhpcy5kZXB0aERvd25zYW1wbGVUYXJnZXQudGV4dHVyZVsxXS5mb3JtYXQgPSBUSFJFRS5SR0JBRm9ybWF0O1xuICAgICAgdGhpcy5kZXB0aERvd25zYW1wbGVUYXJnZXQudGV4dHVyZVsxXS50eXBlID0gVEhSRUUuSGFsZkZsb2F0VHlwZTtcbiAgICAgIHRoaXMuZGVwdGhEb3duc2FtcGxlVGFyZ2V0LnRleHR1cmVbMV0ubWluRmlsdGVyID0gVEhSRUUuTmVhcmVzdEZpbHRlcjtcbiAgICAgIHRoaXMuZGVwdGhEb3duc2FtcGxlVGFyZ2V0LnRleHR1cmVbMV0ubWFnRmlsdGVyID0gVEhSRUUuTmVhcmVzdEZpbHRlcjtcbiAgICAgIHRoaXMuZGVwdGhEb3duc2FtcGxlVGFyZ2V0LnRleHR1cmVbMV0uZGVwdGhCdWZmZXIgPSBmYWxzZTtcbiAgICAgIHRoaXMuZGVwdGhEb3duc2FtcGxlUXVhZCA9IG5ldyBGdWxsU2NyZWVuVHJpYW5nbGUobmV3IFRIUkVFLlNoYWRlck1hdGVyaWFsKERlcHRoRG93blNhbXBsZSkpO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAodGhpcy5kZXB0aERvd25zYW1wbGVUYXJnZXQpIHtcbiAgICAgICAgdGhpcy5kZXB0aERvd25zYW1wbGVUYXJnZXQuZGlzcG9zZSgpO1xuICAgICAgICB0aGlzLmRlcHRoRG93bnNhbXBsZVRhcmdldCA9IG51bGw7XG4gICAgICB9XG4gICAgICBpZiAodGhpcy5kZXB0aERvd25zYW1wbGVRdWFkKSB7XG4gICAgICAgIHRoaXMuZGVwdGhEb3duc2FtcGxlUXVhZC5kaXNwb3NlKCk7XG4gICAgICAgIHRoaXMuZGVwdGhEb3duc2FtcGxlUXVhZCA9IG51bGw7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIGNvbmZpZ3VyZVNhbXBsZURlcGVuZGVudFBhc3NlcygpIHtcbiAgICB0aGlzLmNvbmZpZ3VyZUFPUGFzcyh0aGlzLmNvbmZpZ3VyYXRpb24ubG9nYXJpdGhtaWNEZXB0aEJ1ZmZlcik7XG4gICAgdGhpcy5jb25maWd1cmVEZW5vaXNlUGFzcyh0aGlzLmNvbmZpZ3VyYXRpb24ubG9nYXJpdGhtaWNEZXB0aEJ1ZmZlcik7XG4gIH1cbiAgY29uZmlndXJlQU9QYXNzKGxvZ2FyaXRobWljRGVwdGhCdWZmZXIgPSBmYWxzZSkge1xuICAgIHRoaXMuc2FtcGxlcyA9IHRoaXMuZ2VuZXJhdGVIZW1pc3BoZXJlU2FtcGxlcyh0aGlzLmNvbmZpZ3VyYXRpb24uYW9TYW1wbGVzKTtcbiAgICB0aGlzLnNhbXBsZXNSID0gdGhpcy5nZW5lcmF0ZUhlbWlzcGhlcmVTYW1wbGVzUih0aGlzLmNvbmZpZ3VyYXRpb24uYW9TYW1wbGVzKTtcbiAgICBjb25zdCBlID0geyAuLi5FZmZlY3RTaGFkZXIgfTtcbiAgICBlLmZyYWdtZW50U2hhZGVyID0gZS5mcmFnbWVudFNoYWRlci5yZXBsYWNlKFwiMTZcIiwgdGhpcy5jb25maWd1cmF0aW9uLmFvU2FtcGxlcykucmVwbGFjZShcIjE2LjBcIiwgdGhpcy5jb25maWd1cmF0aW9uLmFvU2FtcGxlcyArIFwiLjBcIik7XG4gICAgaWYgKGxvZ2FyaXRobWljRGVwdGhCdWZmZXIpIHtcbiAgICAgIGUuZnJhZ21lbnRTaGFkZXIgPSBcIiNkZWZpbmUgTE9HREVQVEhcXG5cIiArIGUuZnJhZ21lbnRTaGFkZXI7XG4gICAgfVxuICAgIGlmICh0aGlzLmNvbmZpZ3VyYXRpb24uaGFsZlJlcykge1xuICAgICAgZS5mcmFnbWVudFNoYWRlciA9IFwiI2RlZmluZSBIQUxGUkVTXFxuXCIgKyBlLmZyYWdtZW50U2hhZGVyO1xuICAgIH1cbiAgICBpZiAodGhpcy5lZmZlY3RTaGFkZXJRdWFkKSB7XG4gICAgICB0aGlzLmVmZmVjdFNoYWRlclF1YWQubWF0ZXJpYWwuZGlzcG9zZSgpO1xuICAgICAgdGhpcy5lZmZlY3RTaGFkZXJRdWFkLm1hdGVyaWFsID0gbmV3IFRIUkVFLlNoYWRlck1hdGVyaWFsKGUpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmVmZmVjdFNoYWRlclF1YWQgPSBuZXcgRnVsbFNjcmVlblRyaWFuZ2xlKG5ldyBUSFJFRS5TaGFkZXJNYXRlcmlhbChlKSk7XG4gICAgfVxuICB9XG4gIGNvbmZpZ3VyZURlbm9pc2VQYXNzKGxvZ2FyaXRobWljRGVwdGhCdWZmZXIgPSBmYWxzZSkge1xuICAgIHRoaXMuc2FtcGxlc0Rlbm9pc2UgPSB0aGlzLmdlbmVyYXRlRGVub2lzZVNhbXBsZXModGhpcy5jb25maWd1cmF0aW9uLmRlbm9pc2VTYW1wbGVzLCAxMSk7XG4gICAgY29uc3QgcCA9IHsgLi4uUG9pc3Npb25CbHVyIH07XG4gICAgcC5mcmFnbWVudFNoYWRlciA9IHAuZnJhZ21lbnRTaGFkZXIucmVwbGFjZShcIjE2XCIsIHRoaXMuY29uZmlndXJhdGlvbi5kZW5vaXNlU2FtcGxlcyk7XG4gICAgaWYgKGxvZ2FyaXRobWljRGVwdGhCdWZmZXIpIHtcbiAgICAgIHAuZnJhZ21lbnRTaGFkZXIgPSBcIiNkZWZpbmUgTE9HREVQVEhcXG5cIiArIHAuZnJhZ21lbnRTaGFkZXI7XG4gICAgfVxuICAgIGlmICh0aGlzLnBvaXNzb25CbHVyUXVhZCkge1xuICAgICAgdGhpcy5wb2lzc29uQmx1clF1YWQubWF0ZXJpYWwuZGlzcG9zZSgpO1xuICAgICAgdGhpcy5wb2lzc29uQmx1clF1YWQubWF0ZXJpYWwgPSBuZXcgVEhSRUUuU2hhZGVyTWF0ZXJpYWwocCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMucG9pc3NvbkJsdXJRdWFkID0gbmV3IEZ1bGxTY3JlZW5UcmlhbmdsZShuZXcgVEhSRUUuU2hhZGVyTWF0ZXJpYWwocCkpO1xuICAgIH1cbiAgfVxuICBjb25maWd1cmVFZmZlY3RDb21wb3NpdGVyKGxvZ2FyaXRobWljRGVwdGhCdWZmZXIgPSBmYWxzZSkge1xuICAgIGNvbnN0IGUgPSB7IC4uLkVmZmVjdENvbXBvc2l0ZXIgfTtcbiAgICBpZiAobG9nYXJpdGhtaWNEZXB0aEJ1ZmZlcikge1xuICAgICAgZS5mcmFnbWVudFNoYWRlciA9IFwiI2RlZmluZSBMT0dERVBUSFxcblwiICsgZS5mcmFnbWVudFNoYWRlcjtcbiAgICB9XG4gICAgaWYgKHRoaXMuY29uZmlndXJhdGlvbi5oYWxmUmVzICYmIHRoaXMuY29uZmlndXJhdGlvbi5kZXB0aEF3YXJlVXBzYW1wbGluZykge1xuICAgICAgZS5mcmFnbWVudFNoYWRlciA9IFwiI2RlZmluZSBIQUxGUkVTXFxuXCIgKyBlLmZyYWdtZW50U2hhZGVyO1xuICAgIH1cbiAgICBpZiAodGhpcy5lZmZlY3RDb21wb3NpdGVyUXVhZCkge1xuICAgICAgdGhpcy5lZmZlY3RDb21wb3NpdGVyUXVhZC5tYXRlcmlhbC5kaXNwb3NlKCk7XG4gICAgICB0aGlzLmVmZmVjdENvbXBvc2l0ZXJRdWFkLm1hdGVyaWFsID0gbmV3IFRIUkVFLlNoYWRlck1hdGVyaWFsKGUpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmVmZmVjdENvbXBvc2l0ZXJRdWFkID0gbmV3IEZ1bGxTY3JlZW5UcmlhbmdsZShuZXcgVEhSRUUuU2hhZGVyTWF0ZXJpYWwoZSkpO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICpcbiAgICogQHBhcmFtIHtOdW1iZXJ9IG5cbiAgICogQHJldHVybnMge1RIUkVFLlZlY3RvcjNbXX1cbiAgICovXG4gIGdlbmVyYXRlSGVtaXNwaGVyZVNhbXBsZXMobikge1xuICAgIGNvbnN0IHBvaW50cyA9IFtdO1xuICAgIGZvciAobGV0IGsgPSAwOyBrIDwgbjsgaysrKSB7XG4gICAgICBjb25zdCB0aGV0YSA9IDIuMzk5OTYzICogaztcbiAgICAgIGNvbnN0IHIgPSBNYXRoLnNxcnQoayArIDAuNSkgLyBNYXRoLnNxcnQobik7XG4gICAgICBjb25zdCB4ID0gciAqIE1hdGguY29zKHRoZXRhKTtcbiAgICAgIGNvbnN0IHkgPSByICogTWF0aC5zaW4odGhldGEpO1xuICAgICAgY29uc3QgeiA9IE1hdGguc3FydCgxIC0gKHggKiB4ICsgeSAqIHkpKTtcbiAgICAgIHBvaW50cy5wdXNoKG5ldyBUSFJFRS5WZWN0b3IzKHgsIHksIHopKTtcbiAgICB9XG4gICAgcmV0dXJuIHBvaW50cztcbiAgfVxuICAvKipcbiAgICpcbiAgICogQHBhcmFtIHtudW1iZXJ9IG5cbiAgICogQHJldHVybnMge251bWJlcltdfVxuICAgKi9cbiAgZ2VuZXJhdGVIZW1pc3BoZXJlU2FtcGxlc1Iobikge1xuICAgIGxldCBzYW1wbGVzUiA9IFtdO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbjsgaSsrKSB7XG4gICAgICBzYW1wbGVzUi5wdXNoKChpICsgMSkgLyBuKTtcbiAgICB9XG4gICAgcmV0dXJuIHNhbXBsZXNSO1xuICB9XG4gIC8qKlxuICAgKlxuICAgKiBAcGFyYW0ge251bWJlcn0gbnVtU2FtcGxlc1xuICAgKiBAcGFyYW0ge251bWJlcn0gbnVtUmluZ3NcbiAgICogQHJldHVybnMge1RIUkVFLlZlY3RvcjJbXX1cbiAgICovXG4gIGdlbmVyYXRlRGVub2lzZVNhbXBsZXMobnVtU2FtcGxlcywgbnVtUmluZ3MpIHtcbiAgICBjb25zdCBhbmdsZVN0ZXAgPSAyICogTWF0aC5QSSAqIG51bVJpbmdzIC8gbnVtU2FtcGxlcztcbiAgICBjb25zdCBpbnZOdW1TYW1wbGVzID0gMSAvIG51bVNhbXBsZXM7XG4gICAgY29uc3QgcmFkaXVzU3RlcCA9IGludk51bVNhbXBsZXM7XG4gICAgY29uc3Qgc2FtcGxlcyA9IFtdO1xuICAgIGxldCByYWRpdXMgPSBpbnZOdW1TYW1wbGVzO1xuICAgIGxldCBhbmdsZSA9IDA7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBudW1TYW1wbGVzOyBpKyspIHtcbiAgICAgIHNhbXBsZXMucHVzaChuZXcgVEhSRUUuVmVjdG9yMihNYXRoLmNvcyhhbmdsZSksIE1hdGguc2luKGFuZ2xlKSkubXVsdGlwbHlTY2FsYXIoTWF0aC5wb3cocmFkaXVzLCAwLjc1KSkpO1xuICAgICAgcmFkaXVzICs9IHJhZGl1c1N0ZXA7XG4gICAgICBhbmdsZSArPSBhbmdsZVN0ZXA7XG4gICAgfVxuICAgIHJldHVybiBzYW1wbGVzO1xuICB9XG4gIHNldFNpemUod2lkdGgsIGhlaWdodCkge1xuICAgIHRoaXMud2lkdGggPSB3aWR0aDtcbiAgICB0aGlzLmhlaWdodCA9IGhlaWdodDtcbiAgICBjb25zdCBjID0gdGhpcy5jb25maWd1cmF0aW9uLmhhbGZSZXMgPyAwLjUgOiAxO1xuICAgIHRoaXMud3JpdGVUYXJnZXRJbnRlcm5hbC5zZXRTaXplKHdpZHRoICogYywgaGVpZ2h0ICogYyk7XG4gICAgdGhpcy5yZWFkVGFyZ2V0SW50ZXJuYWwuc2V0U2l6ZSh3aWR0aCAqIGMsIGhlaWdodCAqIGMpO1xuICAgIGlmICh0aGlzLmNvbmZpZ3VyYXRpb24uaGFsZlJlcykge1xuICAgICAgdGhpcy5kZXB0aERvd25zYW1wbGVUYXJnZXQuc2V0U2l6ZSh3aWR0aCAqIGMsIGhlaWdodCAqIGMpO1xuICAgIH1cbiAgICB0aGlzLm91dHB1dFRhcmdldEludGVybmFsLnNldFNpemUod2lkdGgsIGhlaWdodCk7XG4gIH1cbiAgc2V0RGVwdGhUZXh0dXJlKGRlcHRoVGV4dHVyZSkge1xuICAgIHRoaXMuZGVwdGhUZXh0dXJlID0gZGVwdGhUZXh0dXJlO1xuICB9XG4gIHJlbmRlcihyZW5kZXJlciwgaW5wdXRCdWZmZXIsIG91dHB1dEJ1ZmZlcikge1xuICAgIGNvbnN0IHhyRW5hYmxlZCA9IHJlbmRlcmVyLnhyLmVuYWJsZWQ7XG4gICAgcmVuZGVyZXIueHIuZW5hYmxlZCA9IGZhbHNlO1xuICAgIGlmIChyZW5kZXJlci5jYXBhYmlsaXRpZXMubG9nYXJpdGhtaWNEZXB0aEJ1ZmZlciAhPT0gdGhpcy5jb25maWd1cmF0aW9uLmxvZ2FyaXRobWljRGVwdGhCdWZmZXIpIHtcbiAgICAgIHRoaXMuY29uZmlndXJhdGlvbi5sb2dhcml0aG1pY0RlcHRoQnVmZmVyID0gcmVuZGVyZXIuY2FwYWJpbGl0aWVzLmxvZ2FyaXRobWljRGVwdGhCdWZmZXI7XG4gICAgICB0aGlzLmNvbmZpZ3VyZUFPUGFzcyh0aGlzLmNvbmZpZ3VyYXRpb24ubG9nYXJpdGhtaWNEZXB0aEJ1ZmZlcik7XG4gICAgICB0aGlzLmNvbmZpZ3VyZURlbm9pc2VQYXNzKHRoaXMuY29uZmlndXJhdGlvbi5sb2dhcml0aG1pY0RlcHRoQnVmZmVyKTtcbiAgICAgIHRoaXMuY29uZmlndXJlRWZmZWN0Q29tcG9zaXRlcih0aGlzLmNvbmZpZ3VyYXRpb24ubG9nYXJpdGhtaWNEZXB0aEJ1ZmZlcik7XG4gICAgfVxuICAgIGlmIChpbnB1dEJ1ZmZlci50ZXh0dXJlLnR5cGUgIT09IHRoaXMub3V0cHV0VGFyZ2V0SW50ZXJuYWwudGV4dHVyZS50eXBlKSB7XG4gICAgICB0aGlzLm91dHB1dFRhcmdldEludGVybmFsLnRleHR1cmUudHlwZSA9IGlucHV0QnVmZmVyLnRleHR1cmUudHlwZTtcbiAgICAgIHRoaXMub3V0cHV0VGFyZ2V0SW50ZXJuYWwudGV4dHVyZS5uZWVkc1VwZGF0ZSA9IHRydWU7XG4gICAgfVxuICAgIGxldCBnbDtcbiAgICBsZXQgZXh0O1xuICAgIGxldCB0aW1lclF1ZXJ5O1xuICAgIGlmICh0aGlzLmRlYnVnTW9kZSkge1xuICAgICAgZ2wgPSByZW5kZXJlci5nZXRDb250ZXh0KCk7XG4gICAgICBleHQgPSBnbC5nZXRFeHRlbnNpb24oXCJFWFRfZGlzam9pbnRfdGltZXJfcXVlcnlfd2ViZ2wyXCIpO1xuICAgICAgaWYgKGV4dCA9PT0gbnVsbCkge1xuICAgICAgICBjb25zb2xlLmVycm9yKFwiRVhUX2Rpc2pvaW50X3RpbWVyX3F1ZXJ5X3dlYmdsMiBub3QgYXZhaWxhYmxlLCBkaXNhYmxpbmcgZGVidWcgbW9kZS5cIik7XG4gICAgICAgIHRoaXMuZGVidWdNb2RlID0gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuICAgIGlmICh0aGlzLmRlYnVnTW9kZSkge1xuICAgICAgdGltZXJRdWVyeSA9IGdsLmNyZWF0ZVF1ZXJ5KCk7XG4gICAgICBnbC5iZWdpblF1ZXJ5KGV4dC5USU1FX0VMQVBTRURfRVhULCB0aW1lclF1ZXJ5KTtcbiAgICB9XG4gICAgdGhpcy5jYW1lcmEudXBkYXRlTWF0cml4V29ybGQoKTtcbiAgICB0aGlzLl9yLnNldCh0aGlzLndpZHRoLCB0aGlzLmhlaWdodCk7XG4gICAgbGV0IHRydWVSYWRpdXMgPSB0aGlzLmNvbmZpZ3VyYXRpb24uYW9SYWRpdXM7XG4gICAgaWYgKHRoaXMuY29uZmlndXJhdGlvbi5oYWxmUmVzICYmIHRoaXMuY29uZmlndXJhdGlvbi5zY3JlZW5TcGFjZVJhZGl1cykge1xuICAgICAgdHJ1ZVJhZGl1cyAqPSAwLjU7XG4gICAgfVxuICAgIGlmICh0aGlzLmNvbmZpZ3VyYXRpb24uaGFsZlJlcykge1xuICAgICAgcmVuZGVyZXIuc2V0UmVuZGVyVGFyZ2V0KHRoaXMuZGVwdGhEb3duc2FtcGxlVGFyZ2V0KTtcbiAgICAgIHRoaXMuZGVwdGhEb3duc2FtcGxlUXVhZC5tYXRlcmlhbC51bmlmb3Jtcy5zY2VuZURlcHRoLnZhbHVlID0gdGhpcy5kZXB0aFRleHR1cmU7XG4gICAgICB0aGlzLmRlcHRoRG93bnNhbXBsZVF1YWQubWF0ZXJpYWwudW5pZm9ybXMucmVzb2x1dGlvbi52YWx1ZSA9IHRoaXMuX3I7XG4gICAgICB0aGlzLmRlcHRoRG93bnNhbXBsZVF1YWQubWF0ZXJpYWwudW5pZm9ybXNbXCJuZWFyXCJdLnZhbHVlID0gdGhpcy5jYW1lcmEubmVhcjtcbiAgICAgIHRoaXMuZGVwdGhEb3duc2FtcGxlUXVhZC5tYXRlcmlhbC51bmlmb3Jtc1tcImZhclwiXS52YWx1ZSA9IHRoaXMuY2FtZXJhLmZhcjtcbiAgICAgIHRoaXMuZGVwdGhEb3duc2FtcGxlUXVhZC5tYXRlcmlhbC51bmlmb3Jtc1tcInByb2plY3Rpb25NYXRyaXhJbnZcIl0udmFsdWUgPSB0aGlzLmNhbWVyYS5wcm9qZWN0aW9uTWF0cml4SW52ZXJzZTtcbiAgICAgIHRoaXMuZGVwdGhEb3duc2FtcGxlUXVhZC5tYXRlcmlhbC51bmlmb3Jtc1tcInZpZXdNYXRyaXhJbnZcIl0udmFsdWUgPSB0aGlzLmNhbWVyYS5tYXRyaXhXb3JsZDtcbiAgICAgIHRoaXMuZGVwdGhEb3duc2FtcGxlUXVhZC5tYXRlcmlhbC51bmlmb3Jtc1tcImxvZ0RlcHRoXCJdLnZhbHVlID0gdGhpcy5jb25maWd1cmF0aW9uLmxvZ2FyaXRobWljRGVwdGhCdWZmZXI7XG4gICAgICB0aGlzLmRlcHRoRG93bnNhbXBsZVF1YWQucmVuZGVyKHJlbmRlcmVyKTtcbiAgICB9XG4gICAgdGhpcy5lZmZlY3RTaGFkZXJRdWFkLm1hdGVyaWFsLnVuaWZvcm1zW1wic2NlbmVEaWZmdXNlXCJdLnZhbHVlID0gaW5wdXRCdWZmZXIudGV4dHVyZTtcbiAgICB0aGlzLmVmZmVjdFNoYWRlclF1YWQubWF0ZXJpYWwudW5pZm9ybXNbXCJzY2VuZURlcHRoXCJdLnZhbHVlID0gdGhpcy5jb25maWd1cmF0aW9uLmhhbGZSZXMgPyB0aGlzLmRlcHRoRG93bnNhbXBsZVRhcmdldC50ZXh0dXJlWzBdIDogdGhpcy5kZXB0aFRleHR1cmU7XG4gICAgdGhpcy5lZmZlY3RTaGFkZXJRdWFkLm1hdGVyaWFsLnVuaWZvcm1zW1wic2NlbmVOb3JtYWxcIl0udmFsdWUgPSB0aGlzLmNvbmZpZ3VyYXRpb24uaGFsZlJlcyA/IHRoaXMuZGVwdGhEb3duc2FtcGxlVGFyZ2V0LnRleHR1cmVbMV0gOiBudWxsO1xuICAgIHRoaXMuZWZmZWN0U2hhZGVyUXVhZC5tYXRlcmlhbC51bmlmb3Jtc1tcInByb2pNYXRcIl0udmFsdWUgPSB0aGlzLmNhbWVyYS5wcm9qZWN0aW9uTWF0cml4O1xuICAgIHRoaXMuZWZmZWN0U2hhZGVyUXVhZC5tYXRlcmlhbC51bmlmb3Jtc1tcInZpZXdNYXRcIl0udmFsdWUgPSB0aGlzLmNhbWVyYS5tYXRyaXhXb3JsZEludmVyc2U7XG4gICAgdGhpcy5lZmZlY3RTaGFkZXJRdWFkLm1hdGVyaWFsLnVuaWZvcm1zW1wicHJvalZpZXdNYXRcIl0udmFsdWUgPSB0aGlzLmNhbWVyYS5wcm9qZWN0aW9uTWF0cml4LmNsb25lKCkubXVsdGlwbHkodGhpcy5jYW1lcmEubWF0cml4V29ybGRJbnZlcnNlLmNsb25lKCkpO1xuICAgIHRoaXMuZWZmZWN0U2hhZGVyUXVhZC5tYXRlcmlhbC51bmlmb3Jtc1tcInByb2plY3Rpb25NYXRyaXhJbnZcIl0udmFsdWUgPSB0aGlzLmNhbWVyYS5wcm9qZWN0aW9uTWF0cml4SW52ZXJzZTtcbiAgICB0aGlzLmVmZmVjdFNoYWRlclF1YWQubWF0ZXJpYWwudW5pZm9ybXNbXCJ2aWV3TWF0cml4SW52XCJdLnZhbHVlID0gdGhpcy5jYW1lcmEubWF0cml4V29ybGQ7XG4gICAgdGhpcy5lZmZlY3RTaGFkZXJRdWFkLm1hdGVyaWFsLnVuaWZvcm1zW1wiY2FtZXJhUG9zXCJdLnZhbHVlID0gdGhpcy5jYW1lcmEuZ2V0V29ybGRQb3NpdGlvbihuZXcgVEhSRUUuVmVjdG9yMygpKTtcbiAgICB0aGlzLmVmZmVjdFNoYWRlclF1YWQubWF0ZXJpYWwudW5pZm9ybXNbXCJyZXNvbHV0aW9uXCJdLnZhbHVlID0gdGhpcy5jb25maWd1cmF0aW9uLmhhbGZSZXMgPyB0aGlzLl9yLmNsb25lKCkubXVsdGlwbHlTY2FsYXIoMSAvIDIpLmZsb29yKCkgOiB0aGlzLl9yO1xuICAgIHRoaXMuZWZmZWN0U2hhZGVyUXVhZC5tYXRlcmlhbC51bmlmb3Jtc1tcInRpbWVcIl0udmFsdWUgPSBwZXJmb3JtYW5jZS5ub3coKSAvIDFlMztcbiAgICB0aGlzLmVmZmVjdFNoYWRlclF1YWQubWF0ZXJpYWwudW5pZm9ybXNbXCJzYW1wbGVzXCJdLnZhbHVlID0gdGhpcy5zYW1wbGVzO1xuICAgIHRoaXMuZWZmZWN0U2hhZGVyUXVhZC5tYXRlcmlhbC51bmlmb3Jtc1tcInNhbXBsZXNSXCJdLnZhbHVlID0gdGhpcy5zYW1wbGVzUjtcbiAgICB0aGlzLmVmZmVjdFNoYWRlclF1YWQubWF0ZXJpYWwudW5pZm9ybXNbXCJibHVlbm9pc2VcIl0udmFsdWUgPSB0aGlzLmJsdWVub2lzZTtcbiAgICB0aGlzLmVmZmVjdFNoYWRlclF1YWQubWF0ZXJpYWwudW5pZm9ybXNbXCJyYWRpdXNcIl0udmFsdWUgPSB0cnVlUmFkaXVzO1xuICAgIHRoaXMuZWZmZWN0U2hhZGVyUXVhZC5tYXRlcmlhbC51bmlmb3Jtc1tcImRpc3RhbmNlRmFsbG9mZlwiXS52YWx1ZSA9IHRoaXMuY29uZmlndXJhdGlvbi5kaXN0YW5jZUZhbGxvZmY7XG4gICAgdGhpcy5lZmZlY3RTaGFkZXJRdWFkLm1hdGVyaWFsLnVuaWZvcm1zW1wibmVhclwiXS52YWx1ZSA9IHRoaXMuY2FtZXJhLm5lYXI7XG4gICAgdGhpcy5lZmZlY3RTaGFkZXJRdWFkLm1hdGVyaWFsLnVuaWZvcm1zW1wiZmFyXCJdLnZhbHVlID0gdGhpcy5jYW1lcmEuZmFyO1xuICAgIHRoaXMuZWZmZWN0U2hhZGVyUXVhZC5tYXRlcmlhbC51bmlmb3Jtc1tcImxvZ0RlcHRoXCJdLnZhbHVlID0gcmVuZGVyZXIuY2FwYWJpbGl0aWVzLmxvZ2FyaXRobWljRGVwdGhCdWZmZXI7XG4gICAgdGhpcy5lZmZlY3RTaGFkZXJRdWFkLm1hdGVyaWFsLnVuaWZvcm1zW1wib3J0aG9cIl0udmFsdWUgPSB0aGlzLmNhbWVyYS5pc09ydGhvZ3JhcGhpY0NhbWVyYTtcbiAgICB0aGlzLmVmZmVjdFNoYWRlclF1YWQubWF0ZXJpYWwudW5pZm9ybXNbXCJzY3JlZW5TcGFjZVJhZGl1c1wiXS52YWx1ZSA9IHRoaXMuY29uZmlndXJhdGlvbi5zY3JlZW5TcGFjZVJhZGl1cztcbiAgICByZW5kZXJlci5zZXRSZW5kZXJUYXJnZXQodGhpcy53cml0ZVRhcmdldEludGVybmFsKTtcbiAgICB0aGlzLmVmZmVjdFNoYWRlclF1YWQucmVuZGVyKHJlbmRlcmVyKTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuY29uZmlndXJhdGlvbi5kZW5vaXNlSXRlcmF0aW9uczsgaSsrKSB7XG4gICAgICBbdGhpcy53cml0ZVRhcmdldEludGVybmFsLCB0aGlzLnJlYWRUYXJnZXRJbnRlcm5hbF0gPSBbdGhpcy5yZWFkVGFyZ2V0SW50ZXJuYWwsIHRoaXMud3JpdGVUYXJnZXRJbnRlcm5hbF07XG4gICAgICB0aGlzLnBvaXNzb25CbHVyUXVhZC5tYXRlcmlhbC51bmlmb3Jtc1tcInREaWZmdXNlXCJdLnZhbHVlID0gdGhpcy5yZWFkVGFyZ2V0SW50ZXJuYWwudGV4dHVyZTtcbiAgICAgIHRoaXMucG9pc3NvbkJsdXJRdWFkLm1hdGVyaWFsLnVuaWZvcm1zW1wic2NlbmVEZXB0aFwiXS52YWx1ZSA9IHRoaXMuY29uZmlndXJhdGlvbi5oYWxmUmVzID8gdGhpcy5kZXB0aERvd25zYW1wbGVUYXJnZXQudGV4dHVyZVswXSA6IHRoaXMuZGVwdGhUZXh0dXJlO1xuICAgICAgdGhpcy5wb2lzc29uQmx1clF1YWQubWF0ZXJpYWwudW5pZm9ybXNbXCJwcm9qTWF0XCJdLnZhbHVlID0gdGhpcy5jYW1lcmEucHJvamVjdGlvbk1hdHJpeDtcbiAgICAgIHRoaXMucG9pc3NvbkJsdXJRdWFkLm1hdGVyaWFsLnVuaWZvcm1zW1widmlld01hdFwiXS52YWx1ZSA9IHRoaXMuY2FtZXJhLm1hdHJpeFdvcmxkSW52ZXJzZTtcbiAgICAgIHRoaXMucG9pc3NvbkJsdXJRdWFkLm1hdGVyaWFsLnVuaWZvcm1zW1wicHJvamVjdGlvbk1hdHJpeEludlwiXS52YWx1ZSA9IHRoaXMuY2FtZXJhLnByb2plY3Rpb25NYXRyaXhJbnZlcnNlO1xuICAgICAgdGhpcy5wb2lzc29uQmx1clF1YWQubWF0ZXJpYWwudW5pZm9ybXNbXCJ2aWV3TWF0cml4SW52XCJdLnZhbHVlID0gdGhpcy5jYW1lcmEubWF0cml4V29ybGQ7XG4gICAgICB0aGlzLnBvaXNzb25CbHVyUXVhZC5tYXRlcmlhbC51bmlmb3Jtc1tcImNhbWVyYVBvc1wiXS52YWx1ZSA9IHRoaXMuY2FtZXJhLmdldFdvcmxkUG9zaXRpb24obmV3IFRIUkVFLlZlY3RvcjMoKSk7XG4gICAgICB0aGlzLnBvaXNzb25CbHVyUXVhZC5tYXRlcmlhbC51bmlmb3Jtc1tcInJlc29sdXRpb25cIl0udmFsdWUgPSB0aGlzLmNvbmZpZ3VyYXRpb24uaGFsZlJlcyA/IHRoaXMuX3IuY2xvbmUoKS5tdWx0aXBseVNjYWxhcigxIC8gMikuZmxvb3IoKSA6IHRoaXMuX3I7XG4gICAgICB0aGlzLnBvaXNzb25CbHVyUXVhZC5tYXRlcmlhbC51bmlmb3Jtc1tcInRpbWVcIl0udmFsdWUgPSBwZXJmb3JtYW5jZS5ub3coKSAvIDFlMztcbiAgICAgIHRoaXMucG9pc3NvbkJsdXJRdWFkLm1hdGVyaWFsLnVuaWZvcm1zW1wiYmx1ZU5vaXNlXCJdLnZhbHVlID0gdGhpcy5ibHVlbm9pc2U7XG4gICAgICB0aGlzLnBvaXNzb25CbHVyUXVhZC5tYXRlcmlhbC51bmlmb3Jtc1tcInJhZGl1c1wiXS52YWx1ZSA9IHRoaXMuY29uZmlndXJhdGlvbi5kZW5vaXNlUmFkaXVzICogKHRoaXMuY29uZmlndXJhdGlvbi5oYWxmUmVzID8gMSAvIDIgOiAxKTtcbiAgICAgIHRoaXMucG9pc3NvbkJsdXJRdWFkLm1hdGVyaWFsLnVuaWZvcm1zW1wid29ybGRSYWRpdXNcIl0udmFsdWUgPSB0cnVlUmFkaXVzO1xuICAgICAgdGhpcy5wb2lzc29uQmx1clF1YWQubWF0ZXJpYWwudW5pZm9ybXNbXCJkaXN0YW5jZUZhbGxvZmZcIl0udmFsdWUgPSB0aGlzLmNvbmZpZ3VyYXRpb24uZGlzdGFuY2VGYWxsb2ZmO1xuICAgICAgdGhpcy5wb2lzc29uQmx1clF1YWQubWF0ZXJpYWwudW5pZm9ybXNbXCJpbmRleFwiXS52YWx1ZSA9IGk7XG4gICAgICB0aGlzLnBvaXNzb25CbHVyUXVhZC5tYXRlcmlhbC51bmlmb3Jtc1tcInBvaXNzb25EaXNrXCJdLnZhbHVlID0gdGhpcy5zYW1wbGVzRGVub2lzZTtcbiAgICAgIHRoaXMucG9pc3NvbkJsdXJRdWFkLm1hdGVyaWFsLnVuaWZvcm1zW1wibmVhclwiXS52YWx1ZSA9IHRoaXMuY2FtZXJhLm5lYXI7XG4gICAgICB0aGlzLnBvaXNzb25CbHVyUXVhZC5tYXRlcmlhbC51bmlmb3Jtc1tcImZhclwiXS52YWx1ZSA9IHRoaXMuY2FtZXJhLmZhcjtcbiAgICAgIHRoaXMucG9pc3NvbkJsdXJRdWFkLm1hdGVyaWFsLnVuaWZvcm1zW1wibG9nRGVwdGhcIl0udmFsdWUgPSByZW5kZXJlci5jYXBhYmlsaXRpZXMubG9nYXJpdGhtaWNEZXB0aEJ1ZmZlcjtcbiAgICAgIHRoaXMucG9pc3NvbkJsdXJRdWFkLm1hdGVyaWFsLnVuaWZvcm1zW1wic2NyZWVuU3BhY2VSYWRpdXNcIl0udmFsdWUgPSB0aGlzLmNvbmZpZ3VyYXRpb24uc2NyZWVuU3BhY2VSYWRpdXM7XG4gICAgICByZW5kZXJlci5zZXRSZW5kZXJUYXJnZXQodGhpcy53cml0ZVRhcmdldEludGVybmFsKTtcbiAgICAgIHRoaXMucG9pc3NvbkJsdXJRdWFkLnJlbmRlcihyZW5kZXJlcik7XG4gICAgfVxuICAgIHRoaXMuZWZmZWN0Q29tcG9zaXRlclF1YWQubWF0ZXJpYWwudW5pZm9ybXNbXCJzY2VuZURpZmZ1c2VcIl0udmFsdWUgPSBpbnB1dEJ1ZmZlci50ZXh0dXJlO1xuICAgIHRoaXMuZWZmZWN0Q29tcG9zaXRlclF1YWQubWF0ZXJpYWwudW5pZm9ybXNbXCJzY2VuZURlcHRoXCJdLnZhbHVlID0gdGhpcy5kZXB0aFRleHR1cmU7XG4gICAgdGhpcy5lZmZlY3RDb21wb3NpdGVyUXVhZC5tYXRlcmlhbC51bmlmb3Jtc1tcIm5lYXJcIl0udmFsdWUgPSB0aGlzLmNhbWVyYS5uZWFyO1xuICAgIHRoaXMuZWZmZWN0Q29tcG9zaXRlclF1YWQubWF0ZXJpYWwudW5pZm9ybXNbXCJmYXJcIl0udmFsdWUgPSB0aGlzLmNhbWVyYS5mYXI7XG4gICAgdGhpcy5lZmZlY3RDb21wb3NpdGVyUXVhZC5tYXRlcmlhbC51bmlmb3Jtc1tcInByb2plY3Rpb25NYXRyaXhJbnZcIl0udmFsdWUgPSB0aGlzLmNhbWVyYS5wcm9qZWN0aW9uTWF0cml4SW52ZXJzZTtcbiAgICB0aGlzLmVmZmVjdENvbXBvc2l0ZXJRdWFkLm1hdGVyaWFsLnVuaWZvcm1zW1widmlld01hdHJpeEludlwiXS52YWx1ZSA9IHRoaXMuY2FtZXJhLm1hdHJpeFdvcmxkO1xuICAgIHRoaXMuZWZmZWN0Q29tcG9zaXRlclF1YWQubWF0ZXJpYWwudW5pZm9ybXNbXCJsb2dEZXB0aFwiXS52YWx1ZSA9IHJlbmRlcmVyLmNhcGFiaWxpdGllcy5sb2dhcml0aG1pY0RlcHRoQnVmZmVyO1xuICAgIHRoaXMuZWZmZWN0Q29tcG9zaXRlclF1YWQubWF0ZXJpYWwudW5pZm9ybXNbXCJvcnRob1wiXS52YWx1ZSA9IHRoaXMuY2FtZXJhLmlzT3J0aG9ncmFwaGljQ2FtZXJhO1xuICAgIHRoaXMuZWZmZWN0Q29tcG9zaXRlclF1YWQubWF0ZXJpYWwudW5pZm9ybXNbXCJkb3duc2FtcGxlZERlcHRoXCJdLnZhbHVlID0gdGhpcy5jb25maWd1cmF0aW9uLmhhbGZSZXMgPyB0aGlzLmRlcHRoRG93bnNhbXBsZVRhcmdldC50ZXh0dXJlWzBdIDogdGhpcy5kZXB0aFRleHR1cmU7XG4gICAgdGhpcy5lZmZlY3RDb21wb3NpdGVyUXVhZC5tYXRlcmlhbC51bmlmb3Jtc1tcInJlc29sdXRpb25cIl0udmFsdWUgPSB0aGlzLl9yO1xuICAgIHRoaXMuZWZmZWN0Q29tcG9zaXRlclF1YWQubWF0ZXJpYWwudW5pZm9ybXNbXCJibHVlTm9pc2VcIl0udmFsdWUgPSB0aGlzLmJsdWVub2lzZTtcbiAgICB0aGlzLmVmZmVjdENvbXBvc2l0ZXJRdWFkLm1hdGVyaWFsLnVuaWZvcm1zW1wiaW50ZW5zaXR5XCJdLnZhbHVlID0gdGhpcy5jb25maWd1cmF0aW9uLmludGVuc2l0eTtcbiAgICB0aGlzLmVmZmVjdENvbXBvc2l0ZXJRdWFkLm1hdGVyaWFsLnVuaWZvcm1zW1wicmVuZGVyTW9kZVwiXS52YWx1ZSA9IHRoaXMuY29uZmlndXJhdGlvbi5yZW5kZXJNb2RlO1xuICAgIHRoaXMuZWZmZWN0Q29tcG9zaXRlclF1YWQubWF0ZXJpYWwudW5pZm9ybXNbXCJzY3JlZW5TcGFjZVJhZGl1c1wiXS52YWx1ZSA9IHRoaXMuY29uZmlndXJhdGlvbi5zY3JlZW5TcGFjZVJhZGl1cztcbiAgICB0aGlzLmVmZmVjdENvbXBvc2l0ZXJRdWFkLm1hdGVyaWFsLnVuaWZvcm1zW1wicmFkaXVzXCJdLnZhbHVlID0gdHJ1ZVJhZGl1cztcbiAgICB0aGlzLmVmZmVjdENvbXBvc2l0ZXJRdWFkLm1hdGVyaWFsLnVuaWZvcm1zW1wiZGlzdGFuY2VGYWxsb2ZmXCJdLnZhbHVlID0gdGhpcy5jb25maWd1cmF0aW9uLmRpc3RhbmNlRmFsbG9mZjtcbiAgICB0aGlzLmVmZmVjdENvbXBvc2l0ZXJRdWFkLm1hdGVyaWFsLnVuaWZvcm1zW1wiZ2FtbWFDb3JyZWN0aW9uXCJdLnZhbHVlID0gdGhpcy5hdXRvc2V0R2FtbWEgPyB0aGlzLnJlbmRlclRvU2NyZWVuIDogdGhpcy5jb25maWd1cmF0aW9uLmdhbW1hQ29ycmVjdGlvbjtcbiAgICB0aGlzLmVmZmVjdENvbXBvc2l0ZXJRdWFkLm1hdGVyaWFsLnVuaWZvcm1zW1widERpZmZ1c2VcIl0udmFsdWUgPSB0aGlzLndyaXRlVGFyZ2V0SW50ZXJuYWwudGV4dHVyZTtcbiAgICB0aGlzLmVmZmVjdENvbXBvc2l0ZXJRdWFkLm1hdGVyaWFsLnVuaWZvcm1zW1wiY29sb3JcIl0udmFsdWUgPSB0aGlzLl9jLmNvcHkodGhpcy5jb25maWd1cmF0aW9uLmNvbG9yKS5jb252ZXJ0U1JHQlRvTGluZWFyKCk7XG4gICAgdGhpcy5lZmZlY3RDb21wb3NpdGVyUXVhZC5tYXRlcmlhbC51bmlmb3Jtc1tcImNvbG9yTXVsdGlwbHlcIl0udmFsdWUgPSB0aGlzLmNvbmZpZ3VyYXRpb24uY29sb3JNdWx0aXBseTtcbiAgICB0aGlzLmVmZmVjdENvbXBvc2l0ZXJRdWFkLm1hdGVyaWFsLnVuaWZvcm1zW1wiY2FtZXJhUG9zXCJdLnZhbHVlID0gdGhpcy5jYW1lcmEuZ2V0V29ybGRQb3NpdGlvbihuZXcgVEhSRUUuVmVjdG9yMygpKTtcbiAgICB0aGlzLmVmZmVjdENvbXBvc2l0ZXJRdWFkLm1hdGVyaWFsLnVuaWZvcm1zW1wiZm9nXCJdLnZhbHVlID0gISF0aGlzLnNjZW5lLmZvZztcbiAgICBpZiAodGhpcy5zY2VuZS5mb2cpIHtcbiAgICAgIGlmICh0aGlzLnNjZW5lLmZvZy5pc0ZvZykge1xuICAgICAgICB0aGlzLmVmZmVjdENvbXBvc2l0ZXJRdWFkLm1hdGVyaWFsLnVuaWZvcm1zW1wiZm9nRXhwXCJdLnZhbHVlID0gZmFsc2U7XG4gICAgICAgIHRoaXMuZWZmZWN0Q29tcG9zaXRlclF1YWQubWF0ZXJpYWwudW5pZm9ybXNbXCJmb2dOZWFyXCJdLnZhbHVlID0gdGhpcy5zY2VuZS5mb2cubmVhcjtcbiAgICAgICAgdGhpcy5lZmZlY3RDb21wb3NpdGVyUXVhZC5tYXRlcmlhbC51bmlmb3Jtc1tcImZvZ0ZhclwiXS52YWx1ZSA9IHRoaXMuc2NlbmUuZm9nLmZhcjtcbiAgICAgIH0gZWxzZSBpZiAodGhpcy5zY2VuZS5mb2cuaXNGb2dFeHAyKSB7XG4gICAgICAgIHRoaXMuZWZmZWN0Q29tcG9zaXRlclF1YWQubWF0ZXJpYWwudW5pZm9ybXNbXCJmb2dFeHBcIl0udmFsdWUgPSB0cnVlO1xuICAgICAgICB0aGlzLmVmZmVjdENvbXBvc2l0ZXJRdWFkLm1hdGVyaWFsLnVuaWZvcm1zW1wiZm9nRGVuc2l0eVwiXS52YWx1ZSA9IHRoaXMuc2NlbmUuZm9nLmRlbnNpdHk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb25zb2xlLmVycm9yKGBVbnN1cHBvcnRlZCBmb2cgdHlwZSAke3RoaXMuc2NlbmUuZm9nLmNvbnN0cnVjdG9yLm5hbWV9IGluIFNTQU9QYXNzLmApO1xuICAgICAgfVxuICAgIH1cbiAgICByZW5kZXJlci5zZXRSZW5kZXJUYXJnZXQoXG4gICAgICAvKiB0aGlzLnJlbmRlclRvU2NyZWVuID8gbnVsbCA6XG4gICAgICAgICAgICAgICAgIG91dHB1dEJ1ZmZlciovXG4gICAgICB0aGlzLm91dHB1dFRhcmdldEludGVybmFsXG4gICAgKTtcbiAgICB0aGlzLmVmZmVjdENvbXBvc2l0ZXJRdWFkLnJlbmRlcihyZW5kZXJlcik7XG4gICAgcmVuZGVyZXIuc2V0UmVuZGVyVGFyZ2V0KHRoaXMucmVuZGVyVG9TY3JlZW4gPyBudWxsIDogb3V0cHV0QnVmZmVyKTtcbiAgICB0aGlzLmNvcHlRdWFkLm1hdGVyaWFsLnVuaWZvcm1zW1widERpZmZ1c2VcIl0udmFsdWUgPSB0aGlzLm91dHB1dFRhcmdldEludGVybmFsLnRleHR1cmU7XG4gICAgdGhpcy5jb3B5UXVhZC5yZW5kZXIocmVuZGVyZXIpO1xuICAgIGlmICh0aGlzLmRlYnVnTW9kZSkge1xuICAgICAgZ2wuZW5kUXVlcnkoZXh0LlRJTUVfRUxBUFNFRF9FWFQpO1xuICAgICAgY2hlY2tUaW1lclF1ZXJ5KHRpbWVyUXVlcnksIGdsLCB0aGlzKTtcbiAgICB9XG4gICAgcmVuZGVyZXIueHIuZW5hYmxlZCA9IHhyRW5hYmxlZDtcbiAgfVxuICAvKipcbiAgICogRW5hYmxlcyB0aGUgZGVidWcgbW9kZSBvZiB0aGUgQU8sIG1lYW5pbmcgdGhlIGxhc3RUaW1lIHZhbHVlIHdpbGwgYmUgdXBkYXRlZC5cbiAgICovXG4gIGVuYWJsZURlYnVnTW9kZSgpIHtcbiAgICB0aGlzLmRlYnVnTW9kZSA9IHRydWU7XG4gIH1cbiAgLyoqXG4gICAqIERpc2FibGVzIHRoZSBkZWJ1ZyBtb2RlIG9mIHRoZSBBTywgbWVhbmluZyB0aGUgbGFzdFRpbWUgdmFsdWUgd2lsbCBub3QgYmUgdXBkYXRlZC5cbiAgICovXG4gIGRpc2FibGVEZWJ1Z01vZGUoKSB7XG4gICAgdGhpcy5kZWJ1Z01vZGUgPSBmYWxzZTtcbiAgfVxuICAvKipcbiAgICogU2V0cyB0aGUgZGlzcGxheSBtb2RlIG9mIHRoZSBBT1xuICAgKiBAcGFyYW0ge1wiQ29tYmluZWRcIiB8IFwiQU9cIiB8IFwiTm8gQU9cIiB8IFwiU3BsaXRcIiB8IFwiU3BsaXQgQU9cIn0gbW9kZSAtIFRoZSBkaXNwbGF5IG1vZGUuXG4gICAqL1xuICBzZXREaXNwbGF5TW9kZShtb2RlKSB7XG4gICAgdGhpcy5jb25maWd1cmF0aW9uLnJlbmRlck1vZGUgPSBbXCJDb21iaW5lZFwiLCBcIkFPXCIsIFwiTm8gQU9cIiwgXCJTcGxpdFwiLCBcIlNwbGl0IEFPXCJdLmluZGV4T2YobW9kZSk7XG4gIH1cbiAgLyoqXG4gICAqXG4gICAqIEBwYXJhbSB7XCJQZXJmb3JtYW5jZVwiIHwgXCJMb3dcIiB8IFwiTWVkaXVtXCIgfCBcIkhpZ2hcIiB8IFwiVWx0cmFcIn0gbW9kZVxuICAgKi9cbiAgc2V0UXVhbGl0eU1vZGUobW9kZSkge1xuICAgIGlmIChtb2RlID09PSBcIlBlcmZvcm1hbmNlXCIpIHtcbiAgICAgIHRoaXMuY29uZmlndXJhdGlvbi5hb1NhbXBsZXMgPSA4O1xuICAgICAgdGhpcy5jb25maWd1cmF0aW9uLmRlbm9pc2VTYW1wbGVzID0gNDtcbiAgICAgIHRoaXMuY29uZmlndXJhdGlvbi5kZW5vaXNlUmFkaXVzID0gMTI7XG4gICAgfSBlbHNlIGlmIChtb2RlID09PSBcIkxvd1wiKSB7XG4gICAgICB0aGlzLmNvbmZpZ3VyYXRpb24uYW9TYW1wbGVzID0gMTY7XG4gICAgICB0aGlzLmNvbmZpZ3VyYXRpb24uZGVub2lzZVNhbXBsZXMgPSA0O1xuICAgICAgdGhpcy5jb25maWd1cmF0aW9uLmRlbm9pc2VSYWRpdXMgPSAxMjtcbiAgICB9IGVsc2UgaWYgKG1vZGUgPT09IFwiTWVkaXVtXCIpIHtcbiAgICAgIHRoaXMuY29uZmlndXJhdGlvbi5hb1NhbXBsZXMgPSAxNjtcbiAgICAgIHRoaXMuY29uZmlndXJhdGlvbi5kZW5vaXNlU2FtcGxlcyA9IDg7XG4gICAgICB0aGlzLmNvbmZpZ3VyYXRpb24uZGVub2lzZVJhZGl1cyA9IDEyO1xuICAgIH0gZWxzZSBpZiAobW9kZSA9PT0gXCJIaWdoXCIpIHtcbiAgICAgIHRoaXMuY29uZmlndXJhdGlvbi5hb1NhbXBsZXMgPSA2NDtcbiAgICAgIHRoaXMuY29uZmlndXJhdGlvbi5kZW5vaXNlU2FtcGxlcyA9IDg7XG4gICAgICB0aGlzLmNvbmZpZ3VyYXRpb24uZGVub2lzZVJhZGl1cyA9IDY7XG4gICAgfSBlbHNlIGlmIChtb2RlID09PSBcIlVsdHJhXCIpIHtcbiAgICAgIHRoaXMuY29uZmlndXJhdGlvbi5hb1NhbXBsZXMgPSA2NDtcbiAgICAgIHRoaXMuY29uZmlndXJhdGlvbi5kZW5vaXNlU2FtcGxlcyA9IDE2O1xuICAgICAgdGhpcy5jb25maWd1cmF0aW9uLmRlbm9pc2VSYWRpdXMgPSA2O1xuICAgIH1cbiAgfVxufVxuZXhwb3J0IHtcbiAgTjhBT1Bvc3RQYXNzXG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9TjhBT1Bvc3RQYXNzLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-client)/./node_modules/@react-three/postprocessing/dist/effects/N8AO/N8AOPostPass.js\n"));

/***/ }),

/***/ "(app-client)/./node_modules/@react-three/postprocessing/dist/effects/N8AO/PoissionBlur.js":
/*!************************************************************************************!*\
  !*** ./node_modules/@react-three/postprocessing/dist/effects/N8AO/PoissionBlur.js ***!
  \************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PoissionBlur: function() { return /* binding */ PoissionBlur; }\n/* harmony export */ });\n/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! three */ \"(app-client)/./node_modules/three/build/three.module.js\");\n\nconst PoissionBlur = {\n  uniforms: {\n    sceneDiffuse: { value: null },\n    sceneDepth: { value: null },\n    tDiffuse: { value: null },\n    projMat: { value: new three__WEBPACK_IMPORTED_MODULE_0__.Matrix4() },\n    viewMat: { value: new three__WEBPACK_IMPORTED_MODULE_0__.Matrix4() },\n    projectionMatrixInv: { value: new three__WEBPACK_IMPORTED_MODULE_0__.Matrix4() },\n    viewMatrixInv: { value: new three__WEBPACK_IMPORTED_MODULE_0__.Matrix4() },\n    cameraPos: { value: new three__WEBPACK_IMPORTED_MODULE_0__.Vector3() },\n    resolution: { value: new three__WEBPACK_IMPORTED_MODULE_0__.Vector2() },\n    time: { value: 0 },\n    r: { value: 5 },\n    blueNoise: { value: null },\n    radius: { value: 12 },\n    worldRadius: { value: 5 },\n    index: { value: 0 },\n    poissonDisk: { value: [] },\n    distanceFalloff: { value: 1 },\n    near: { value: 0.1 },\n    far: { value: 1e3 },\n    logDepth: { value: false },\n    screenSpaceRadius: { value: false }\n  },\n  depthWrite: false,\n  depthTest: false,\n  vertexShader: (\n    /* glsl */\n    `\n\t\tvarying vec2 vUv;\n\t\tvoid main() {\n\t\t\tvUv = uv;\n\t\t\tgl_Position = vec4(position, 1.0);\n\t\t}`\n  ),\n  fragmentShader: (\n    /* glsl */\n    `\n\t\tuniform sampler2D sceneDiffuse;\n    uniform highp sampler2D sceneDepth;\n    uniform sampler2D tDiffuse;\n    uniform sampler2D blueNoise;\n    uniform mat4 projectionMatrixInv;\n    uniform mat4 viewMatrixInv;\n    uniform vec2 resolution;\n    uniform float r;\n    uniform float radius;\n     uniform float worldRadius;\n    uniform float index;\n     uniform float near;\n     uniform float far;\n     uniform float distanceFalloff;\n     uniform bool logDepth;\n     uniform bool screenSpaceRadius;\n    varying vec2 vUv;\n\n    highp float linearize_depth(highp float d, highp float zNear,highp float zFar)\n    {\n        highp float z_n = 2.0 * d - 1.0;\n        return 2.0 * zNear * zFar / (zFar + zNear - z_n * (zFar - zNear));\n    }\n    highp float linearize_depth_log(highp float d, highp float nearZ,highp float farZ) {\n     float depth = pow(2.0, d * log2(farZ + 1.0)) - 1.0;\n     float a = farZ / (farZ - nearZ);\n     float b = farZ * nearZ / (nearZ - farZ);\n     float linDepth = a + b / depth;\n     return linearize_depth(linDepth, nearZ, farZ);\n   }\n   highp float linearize_depth_ortho(highp float d, highp float nearZ, highp float farZ) {\n     return nearZ + (farZ - nearZ) * d;\n   }\n   vec3 getWorldPosLog(vec3 posS) {\n     vec2 uv = posS.xy;\n     float z = posS.z;\n     float nearZ =near;\n     float farZ = far;\n     float depth = pow(2.0, z * log2(farZ + 1.0)) - 1.0;\n     float a = farZ / (farZ - nearZ);\n     float b = farZ * nearZ / (nearZ - farZ);\n     float linDepth = a + b / depth;\n     vec4 clipVec = vec4(uv, linDepth, 1.0) * 2.0 - 1.0;\n     vec4 wpos = projectionMatrixInv * clipVec;\n     return wpos.xyz / wpos.w;\n   }\n    vec3 getWorldPos(float depth, vec2 coord) {\n     #ifdef LOGDEPTH\n          return getWorldPosLog(vec3(coord, depth));\n     #endif\n        \n        float z = depth * 2.0 - 1.0;\n        vec4 clipSpacePosition = vec4(coord * 2.0 - 1.0, z, 1.0);\n        vec4 viewSpacePosition = projectionMatrixInv * clipSpacePosition;\n        // Perspective division\n       vec4 worldSpacePosition = viewSpacePosition;\n       worldSpacePosition.xyz /= worldSpacePosition.w;\n        return worldSpacePosition.xyz;\n    }\n    #include <common>\n    #define NUM_SAMPLES 16\n    uniform vec2 poissonDisk[NUM_SAMPLES];\n    void main() {\n        const float pi = 3.14159;\n        vec2 texelSize = vec2(1.0 / resolution.x, 1.0 / resolution.y);\n        vec2 uv = vUv;\n        vec4 data = texture2D(tDiffuse, vUv);\n        float occlusion = data.a;\n        float baseOcc = data.a;\n        vec3 normal = data.rgb * 2.0 - 1.0;\n        float count = 1.0;\n        float d = texture2D(sceneDepth, vUv).x;\n        if (d == 1.0) {\n          gl_FragColor = data;\n          return;\n        }\n        vec3 worldPos = getWorldPos(d, vUv);\n        float size = radius;\n        float angle;\n        if (index == 0.0) {\n             angle = texture2D(blueNoise, gl_FragCoord.xy / 128.0).x * PI2;\n        } else if (index == 1.0) {\n             angle = texture2D(blueNoise, gl_FragCoord.xy / 128.0).y * PI2;\n        } else if (index == 2.0) {\n             angle = texture2D(blueNoise, gl_FragCoord.xy / 128.0).z * PI2;\n        } else {\n             angle = texture2D(blueNoise, gl_FragCoord.xy / 128.0).w * PI2;\n        }\n\n        mat2 rotationMatrix = mat2(cos(angle), -sin(angle), sin(angle), cos(angle));\n        float radiusToUse = screenSpaceRadius ? distance(\n          worldPos,\n          getWorldPos(d, vUv +\n            vec2(worldRadius, 0.0) / resolution)\n        ) : worldRadius;\n        float distanceFalloffToUse =screenSpaceRadius ?\n            radiusToUse * distanceFalloff\n        : distanceFalloff;\n\n\n        for(int i = 0; i < NUM_SAMPLES; i++) {\n            vec2 offset = (rotationMatrix * poissonDisk[i]) * texelSize * size;\n            vec4 dataSample = texture2D(tDiffuse, uv + offset);\n            float occSample = dataSample.a;\n            vec3 normalSample = dataSample.rgb * 2.0 - 1.0;\n            float dSample = texture2D(sceneDepth, uv + offset).x;\n            vec3 worldPosSample = getWorldPos(dSample, uv + offset);\n            float tangentPlaneDist = abs(dot(worldPos - worldPosSample, normal));\n            float rangeCheck = dSample == 1.0 ? 0.0 :exp(-1.0 * tangentPlaneDist * (1.0 / distanceFalloffToUse)) * max(dot(normal, normalSample), 0.0) * (1.0 - abs(occSample - baseOcc));\n            occlusion += occSample * rangeCheck;\n            count += rangeCheck;\n        }\n        if (count > 0.0) {\n          occlusion /= count;\n        }\n        #ifdef LOGDEPTH\n          occlusion = clamp(occlusion, 0.0, 1.0);\n          if (occlusion == 0.0) {\n            occlusion = 1.0;\n          }\n        #endif\n        gl_FragColor = vec4(0.5 + 0.5 * normal, occlusion);\n    }\n    `\n  )\n};\n\n//# sourceMappingURL=PoissionBlur.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-client)/./node_modules/@react-three/postprocessing/dist/effects/N8AO/PoissionBlur.js\n"));

/***/ }),

/***/ "(app-client)/./node_modules/@react-three/postprocessing/dist/effects/N8AO/index.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@react-three/postprocessing/dist/effects/N8AO/index.js ***!
  \*****************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   N8AO: function() { return /* binding */ N8AO; }\n/* harmony export */ });\n/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-runtime */ \"(app-client)/./node_modules/next/dist/compiled/react/jsx-runtime.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-client)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var _N8AOPostPass_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./N8AOPostPass.js */ \"(app-client)/./node_modules/@react-three/postprocessing/dist/effects/N8AO/N8AOPostPass.js\");\n/* harmony import */ var _react_three_fiber__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @react-three/fiber */ \"(app-client)/./node_modules/@react-three/fiber/dist/index-e6b5343a.esm.js\");\n\n\n\n\nconst N8AO = (0,react__WEBPACK_IMPORTED_MODULE_1__.forwardRef)(\n  ({\n    halfRes,\n    screenSpaceRadius,\n    quality,\n    depthAwareUpsampling = true,\n    aoRadius = 5,\n    aoSamples = 16,\n    denoiseSamples = 4,\n    denoiseRadius = 12,\n    distanceFalloff = 1,\n    intensity = 1,\n    color,\n    renderMode = 0\n  }, ref) => {\n    const { camera, scene } = (0,_react_three_fiber__WEBPACK_IMPORTED_MODULE_2__.A)();\n    const effect = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(() => new _N8AOPostPass_js__WEBPACK_IMPORTED_MODULE_3__.N8AOPostPass(scene, camera), []);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useLayoutEffect)(() => {\n      (0,_react_three_fiber__WEBPACK_IMPORTED_MODULE_2__.j)(effect.configuration, {\n        color,\n        aoRadius,\n        distanceFalloff,\n        intensity,\n        aoSamples,\n        denoiseSamples,\n        denoiseRadius,\n        screenSpaceRadius,\n        renderMode,\n        halfRes,\n        depthAwareUpsampling\n      });\n    }, [\n      screenSpaceRadius,\n      color,\n      aoRadius,\n      distanceFalloff,\n      intensity,\n      aoSamples,\n      denoiseSamples,\n      denoiseRadius,\n      renderMode,\n      halfRes,\n      depthAwareUpsampling\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useLayoutEffect)(() => {\n      if (quality)\n        effect.setQualityMode(quality.charAt(0).toUpperCase() + quality.slice(1));\n    }, [quality]);\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"primitive\", { ref, object: effect });\n  }\n);\n\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1jbGllbnQpLy4vbm9kZV9tb2R1bGVzL0ByZWFjdC10aHJlZS9wb3N0cHJvY2Vzc2luZy9kaXN0L2VmZmVjdHMvTjhBTy9pbmRleC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUF3QztBQUNxQjtBQUNaO0FBQ1M7QUFDMUQsYUFBYSxpREFBVTtBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSCxZQUFZLGdCQUFnQixFQUFFLHFEQUFRO0FBQ3RDLG1CQUFtQiw4Q0FBTyxXQUFXLDBEQUFZO0FBQ2pELElBQUksc0RBQWU7QUFDbkIsTUFBTSxxREFBVTtBQUNoQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJLHNEQUFlO0FBQ25CO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsMkJBQTJCLHNEQUFHLGdCQUFnQixxQkFBcUI7QUFDbkU7QUFDQTtBQUdFO0FBQ0YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0ByZWFjdC10aHJlZS9wb3N0cHJvY2Vzc2luZy9kaXN0L2VmZmVjdHMvTjhBTy9pbmRleC5qcz82MGE2Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGpzeCB9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xuaW1wb3J0IHsgZm9yd2FyZFJlZiwgdXNlTWVtbywgdXNlTGF5b3V0RWZmZWN0IH0gZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyBOOEFPUG9zdFBhc3MgfSBmcm9tIFwiLi9OOEFPUG9zdFBhc3MuanNcIjtcbmltcG9ydCB7IHVzZVRocmVlLCBhcHBseVByb3BzIH0gZnJvbSBcIkByZWFjdC10aHJlZS9maWJlclwiO1xuY29uc3QgTjhBTyA9IGZvcndhcmRSZWYoXG4gICh7XG4gICAgaGFsZlJlcyxcbiAgICBzY3JlZW5TcGFjZVJhZGl1cyxcbiAgICBxdWFsaXR5LFxuICAgIGRlcHRoQXdhcmVVcHNhbXBsaW5nID0gdHJ1ZSxcbiAgICBhb1JhZGl1cyA9IDUsXG4gICAgYW9TYW1wbGVzID0gMTYsXG4gICAgZGVub2lzZVNhbXBsZXMgPSA0LFxuICAgIGRlbm9pc2VSYWRpdXMgPSAxMixcbiAgICBkaXN0YW5jZUZhbGxvZmYgPSAxLFxuICAgIGludGVuc2l0eSA9IDEsXG4gICAgY29sb3IsXG4gICAgcmVuZGVyTW9kZSA9IDBcbiAgfSwgcmVmKSA9PiB7XG4gICAgY29uc3QgeyBjYW1lcmEsIHNjZW5lIH0gPSB1c2VUaHJlZSgpO1xuICAgIGNvbnN0IGVmZmVjdCA9IHVzZU1lbW8oKCkgPT4gbmV3IE44QU9Qb3N0UGFzcyhzY2VuZSwgY2FtZXJhKSwgW10pO1xuICAgIHVzZUxheW91dEVmZmVjdCgoKSA9PiB7XG4gICAgICBhcHBseVByb3BzKGVmZmVjdC5jb25maWd1cmF0aW9uLCB7XG4gICAgICAgIGNvbG9yLFxuICAgICAgICBhb1JhZGl1cyxcbiAgICAgICAgZGlzdGFuY2VGYWxsb2ZmLFxuICAgICAgICBpbnRlbnNpdHksXG4gICAgICAgIGFvU2FtcGxlcyxcbiAgICAgICAgZGVub2lzZVNhbXBsZXMsXG4gICAgICAgIGRlbm9pc2VSYWRpdXMsXG4gICAgICAgIHNjcmVlblNwYWNlUmFkaXVzLFxuICAgICAgICByZW5kZXJNb2RlLFxuICAgICAgICBoYWxmUmVzLFxuICAgICAgICBkZXB0aEF3YXJlVXBzYW1wbGluZ1xuICAgICAgfSk7XG4gICAgfSwgW1xuICAgICAgc2NyZWVuU3BhY2VSYWRpdXMsXG4gICAgICBjb2xvcixcbiAgICAgIGFvUmFkaXVzLFxuICAgICAgZGlzdGFuY2VGYWxsb2ZmLFxuICAgICAgaW50ZW5zaXR5LFxuICAgICAgYW9TYW1wbGVzLFxuICAgICAgZGVub2lzZVNhbXBsZXMsXG4gICAgICBkZW5vaXNlUmFkaXVzLFxuICAgICAgcmVuZGVyTW9kZSxcbiAgICAgIGhhbGZSZXMsXG4gICAgICBkZXB0aEF3YXJlVXBzYW1wbGluZ1xuICAgIF0pO1xuICAgIHVzZUxheW91dEVmZmVjdCgoKSA9PiB7XG4gICAgICBpZiAocXVhbGl0eSlcbiAgICAgICAgZWZmZWN0LnNldFF1YWxpdHlNb2RlKHF1YWxpdHkuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyBxdWFsaXR5LnNsaWNlKDEpKTtcbiAgICB9LCBbcXVhbGl0eV0pO1xuICAgIHJldHVybiAvKiBAX19QVVJFX18gKi8ganN4KFwicHJpbWl0aXZlXCIsIHsgcmVmLCBvYmplY3Q6IGVmZmVjdCB9KTtcbiAgfVxuKTtcbmV4cG9ydCB7XG4gIE44QU9cbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXBcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-client)/./node_modules/@react-three/postprocessing/dist/effects/N8AO/index.js\n"));

/***/ })

});